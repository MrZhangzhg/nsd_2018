pycharm汉化
1、百度搜索 pycharm2017.3汉化包
2、在百度网盘中下载resource_cn.jar
3、把resources_cn.jar拷贝到/root/bin/pycharm2017/lib/中
4、如果经过第3步，仍然是英文界面，可以将lib目录中的resources_en.jar先剪切到别处
5、启动pycharm，将报错
6、关闭pycharm后，把resources_en.jar再拷贝进去


git
1、它是实现代码管理的工具
2、安装
[root@node3 ~]# yum install -y git
3、配置用户基本信息
[root@node3 ~]# git config --global user.name zzg
[root@node3 ~]# git config --global user.email zhangzg@tedu.cn
# 如果需要编写日志，默认使用的编辑器是vim
[root@node3 ~]# git config --global core.editor vim
4、查看
[root@node3 ~]# git config --list
[root@node3 ~]# cat ~/.gitconfig
5、git的三个区域
工作区：指的就是我们编写代码的目录，工作区中的文件不一定会保存到git中
暂存区：它是工作区和版本库之间的缓冲地带。工作区中的文件先提交到暂存区，如果确定加入
git管理，可以提交到版本库；如果后悔了，可以将文件从暂存区中删除
版本库：在工作区有一个.git目录，它是程序员保存代码、交给git管理的区域

使用git管理代码
1、创建目录（项目的根目录）
[root@node3 ~]# git init devops
[root@node3 ~]# cd devops/
2、查看git状态
[root@node3 devops]# git status
3、在工作区编写程序
[root@node3 devops]# vim hello.py
print('Hello World!')
[root@node3 devops]# git status
4、将当前目录中所有的文件放到暂存区
[root@node3 devops]# git add .
[root@node3 devops]# git status
[root@node3 devops]# git status -s   # 查看概要信息
5、将暂存区中的文件提交到版本库
[root@node3 devops]# git commit -m "project init"
[root@node3 devops]# git status
6、继续编写代码
[root@node3 devops]# echo "a = 10" >> hello.py
[root@node3 devops]# echo 'print("yes")' > new.py
7、将现有工作区内容提交到版本库
[root@node3 devops]# git add .
[root@node3 devops]# git commit -m "add new file"
8、查看提交日志
[root@node3 devops]# git log
9、查看版本库中的文件
[root@node3 devops]# git ls-files
10、删除文件
[root@node3 devops]# git rm new.py
11、撤销删除
[root@node3 devops]# git status
[root@node3 devops]# git reset HEAD new.py
[root@node3 devops]# git checkout -- new.py

配置GITLAB服务器，实现代码统一管理
1、创建虚拟机，内存至少4G，配置好yum、ip地址，安装docker并启动
2、将gitlab镜像导入到docker中
[root@node1 images]# docker load < gitlab_zh.tar
3、将虚拟机的ssh端口改为2222
[root@node3 devops]# vim /etc/ssh/sshd_config
Port 2222
[root@node3 devops]# systemctl restart sshd
4、使用gitlab镜像启动容器
[root@node1 ~]# docker run -d -h gitlab --name gitlab
 -p 443:443 -p 80:80 -p 22:22 --restart always
 -v /srv/gitlab/config:/etc/gitlab -v /srv/gitlab/logs:/var/log/gitlab
 -v /srv/gitlab/data:/var/opt/gitlab gitlab_zh:latest
-h指定容器的主机名，--name指定执行dock ps时看到的容器名
5、在物理机上通过浏览器访问gitlab
因为硬件限制，运行起容器后，gitlab在一段时间内无法访问，需要多等几分钟。
可以在虚拟机上执行docker ps查看状态，当状态是healthy的时候，就可以正常访问了。
6、gitlab中重要的概念
群组group：可以为每个团队创建一个group
项目project：每个团队都可能开发不只一个项目
成员member：每个团队成员，需要有相应的用户名登陆到git


gitlab用户免密登陆
1、生成密钥对
# ssh-keygen -t rsa -C "zhangzg@tedu.cn" -b 4096
2、复制~/.ssh/id_rsa.pub中的公钥
3、粘贴到gitlab个人用户的ssh密钥中

用户将本地代码上传到gitlab服务器
1、进入本地git项目目录
[root@node3 ~]# cd devops/
2、将远程名称origin改名
[root@node3 devops]# git remote rename origin old-origin
如果出现以下错误，可以忽略
error: 不能重命名配置小节 'remote.origin' 到 'remote.old-origin'
3、将本地git名称origin添加到远程
[root@node3 devops]# git remote add origin git@192.168.4.1:devops/core_py.git
4、推送代码到gitlab服务器
[root@node3 devops]# git push -u origin --all
[root@node3 devops]# git push -u origin --tags
如果出现permission denied，需要执行以下操作：
[root@node3 devops]# ssh-agent
将屏幕输出内容执行后，再执行
[root@node3 devops]# ssh-add
5、在gitlab上访问项目，可以看到本地代码已推送到服务器
如果出现@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@远程主机身份改变，
则把~/.ssh/known_hosts删除再试

pycharm配置
file -> settings -> project -> project interpreter -> 右窗格点击右上角
的齿轮选择add local -> 在弹出的窗口，选择下面的Existing enviroment，把
Make available to all projects勾选，再点击右侧的...跳出窗口输入
/usr/local/bin/python3。然后确定返回。

运行python代码
1、在pycharm的文件中右击选择“运行”
2、也可以在终端中：python3 xxxx.py

python中字符串必须有引号，单双引号表示相同的含义。如果不加引号，python会把它当
成一个名称，如果该名称没有定义将会报错。


合法的变量名，有三个要求：
1、首字符必须是字母或下划线
2、其他字符可以是字母、数字或下划线
3、区分大小写

python中变量使用之前必须赋值
n = 10
n = n + 1
赋值语句自右向左运算。首先取出n的值10，再计算n+1的值得到11，最后把11赋值给n
可以简写成n += 1

5 / 2   值为2.5
5 // 2   值为2
5 % 2    求余，也被称作模运算，结果为1
2 ** 3   2的3次方，乘方、幂运算
10 < 20 < 30  python支持连续比较
10 < 20 > 15  相当于10 < 20 and 20 > 15


https://www.jianshu.com/  -> 搜索“python百例”
做“1－5”和“120-打造vim为python IDE”












