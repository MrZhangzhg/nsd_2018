>>> adict = {'name': 'bob', 'age': 20}
>>> dict(['ab', 'cd', ('name', 'niu')])
>>> {}.fromkeys(['niu', 'wang', 'li'], 'male')
>>> 20 in adict
False
>>> 'age' in adict
True
>>> for key in adict:
...   print('%s: %s' % (key, adict[key]))
>>> '%(name)s is %(age)s years old' % adict

通过key更新字典，如果key不在字典中则增加新值，在字典中则修改
>>> adict['email'] = 'bob@tedu.cn'
>>> adict['age'] = 22

>>> adict.keys()
>>> for key in adict.keys():
...   print(key)
>>> for key in adict:
...   print(key)
>>> list(adict.values())
>>> for key, val in adict.items():
...   print('%s: %s' % (key, val))
>>> print(adict.get('phone'))  # 获取key为phone的值，重点
>>> adict.get('phone', '110')  # 获取key为phone的值，没有返回110
>>> adict.popitem()   # 随机弹出一项
>>> adict.pop('email')   # 弹出key是email的项
>>> adict.update({'aaa': 100, 'bbb': 200})


集合：由不同元素组成的set，元素只能是不可变对象。相当于是无值的字典。
>>> aset = set('hello')
>>> aset
{'h', 'o', 'l', 'e'}
>>> len(aset)
4
>>> for ch in aset:
...   print(ch)
>>> bset = set('how')
>>> aset | bset   # 并集
>>> aset & bset   # 交集
>>> aset - bset   # 差补，aset中有，bset中没有的元素

>>> aset.add('new')
>>> aset.update(['hello', 'world'])
>>> cset = set('ho')
>>> cset.issubset(aset)   # cset是aset的子集吗
>>> aset.issuperset(cset)  # aset是cset的超集吗
>>> aset.intersection(bset)   # aset & bset
>>> aset.union(bset)    # aset | bset
>>> aset.difference(bset)   # aset - bset

[root@room8pc16 day05]# cp /etc/passwd /tmp/
[root@room8pc16 day05]# cp /etc/passwd /tmp/mima
修改mima，使之与passwd不完全一样
>>> with open('/tmp/mima') as f:
...   aset = set(f)
>>> with open('/tmp/passwd') as f:
...   bset = set(f)
>>> with open('/tmp/result.txt', 'w') as f:
...   f.writelines(aset - bset)

time模块
>>> import time
>>> time.time()   # 返回时间戳，自1970-1-1 0:00:00到执行命令期间的秒数，常用
>>> time.ctime()   # 当前日期、时间，常用
>>> time.localtime()   # 返回九元组格式时间
>>> time.sleep(3)   # 常用
>>> time.strftime('%Y-%m-%d %H:%M:%S')   # 常用

datetime模块
>>> from datetime import datetime, timedelta
>>> t1 = datetime.now()  # 把当前时间转换成时间对象
>>> t1.year
>>> t1.month
>>> t1.day
>>> t1.hour
>>> t1.minute
>>> t1.second
>>> t1.microsecond
>>> t2 = datetime(2018, 10, 10)
# 转换字符串为datetime对象
>>> t1 = datetime.strptime('Dec 12 2018', '%b %d %Y')
>>> t = datetime(2018, 12, 10)
>>> t1 > t

>>> t = datetime.now()
>>> days = timedelta(days=100)
>>> t1 = t - days
>>> t2 = t + days


>>> import os
>>> os.getcwd()   # pwd
>>> os.mkdir('/tmp/demo')  # mkdir /tmp/demo
>>> os.chdir('/tmp/demo')  # cd /tmp/demo
>>> os.listdir()   # ls
>>> os.listdir('/home')  # ls /home
>>> os.mknod('mytest.txt')   # touch mytest.txt
>>> os.symlink('/etc/hosts', 'zhuji')   # ln -s /etc/hosts zhuju
>>> os.chmod('mytest.txt', 0o644)   # chmod 644 mytest.txt
>>> os.rename('mytest.txt', 'test.doc')  # mv mytest.txt test.doc
>>> os.listdir()
>>> os.remove('zhuji')   # rm -f zhuji
>>> os.rmdir('/tmp/devops')   # 删除空目录
>>> os.path.split('/etc/sysconfig/network')
>>> os.path.basename('/etc/sysconfig/network')
>>> os.path.dirname('/etc/sysconfig/network')
>>> os.path.join('/etc/sysconfig', 'network')
>>> os.path.isfile('/etc/hosts')
>>> os.path.isdir('/etc/hosts')
>>> os.path.exists('/etc/hosts')   # 是否存在
>>> os.path.islink('/etc/hosts')   # 是链接吗

pickle存储器
普通的文件只能把字符类型数据写入到文件中。pickle可以把任意类型的数据存储到文件中，
将来还能无损地取出。
>>> f = open('/tmp/mydata', 'w')
>>> f.write('hello world!\n')
>>> f.write(100)   # 不允许写入数字
>>> f.write({'name': 'bob'})   # 不允许写入字典
>>> f.close()
################################
>>> import pickle as p    # 导入模块时，为其取别名
>>> f = open('/tmp/data', 'wb')
>>> adict = {'name': 'bob', 'age': 23}
>>> p.dump(adict, f)   # 将字典存入文件
>>> f.close()
-------------------
>>> import pickle as p
>>> f = open('/tmp/data', 'rb')
>>> mydict = p.load(f)
>>> f.close()
>>> mydict
>>> mydict['age']


[
    ['2018-12-12', 0, 100, 9900, 'aaaa'],
    ['2018-12-13', 10000, 0, 19900, 'bbbbb'],
]


































