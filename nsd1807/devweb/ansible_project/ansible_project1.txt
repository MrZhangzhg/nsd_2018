ansible项目
一、项目目标
1、通过web界面显示所有服务器信息
2、通过web界面添加主机/组
3、通过web界面添加模块及参数
4、通过web界面在指定的主机/组上执行选定的任务
二、准备环境
1、在虚拟环境中安装ansible
[root@room8pc16 ansible_project]# source /opt/djenv/bin/activate
(djenv) [root@room8pc16 zzg_pypkgs]# cd ansible_pkg/
(djenv) [root@room8pc16 ansible_pkg]# pip install *
(djenv) [root@room8pc16 zzg_pypkgs]# cd ansible-cmdb_pkgs/
(djenv) [root@room8pc16 ansible-cmdb_pkgs]# pip install *
(djenv) [root@room8pc16 zzg_pypkgs]# cd sqlalchemy_pkgs/
(djenv) [root@room8pc16 sqlalchemy_pkgs]# pip install *
2、准备3台虚拟机作为测试机，我这里采用的是node3-node5(192.168.4.3-4.5)
配置IP地址、主机名、yum、免密登陆
三、项目规划
1、数据库规划
(1) 主机组: 组名
(2) 主机：主机名、IP地址、组
(3) 模块：模块名
(4) 参数：参数的key-val对，模块
2、URL
(1) 主页http://127.0.0.1/ 用于列出所有的任务[主机信息、添加主机/组、添加模块、执行任务]
(2) http://127.0.0.1/webansi/ 用于显示所有主机的信息
(3) http://127.0.0.1/webansi/addhosts/  -> 用于添加主机/组
(4) http://127.0.0.1/webansi/addmodules/  -> 用于添加模块/参数
(5) http://127.0.0.1/webansi/tasks/  -> 用于执行任务

四、初始化项目
1、创建项目myansible、创建应用webansi
(djenv) [root@room8pc16 ansible_project]# django-admin startproject myansible
(djenv) [root@room8pc16 ansible_project]# cd myansible/
(djenv) [root@room8pc16 myansible]# python manage.py startapp webansi
2、修改pycharm配置中的django设置
3、修改配置settings.py
ALLOWED_HOSTS = '*'
INSTALLED_APPS = [
    ... ...
    'webansi',
]
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_TZ = False

五、编写模型
1、创建模型
# webansi/models.py
from django.db import models

class HostGroup(models.Model):
    groupname = models.CharField(max_length=50, unique=True, null=False)

    def __str__(self):
        return self.groupname

class Host(models.Model):
    hostname = models.CharField(max_length=100, unique=True, null=False)
    ipaddr = models.CharField(max_length=15, null=False)
    group = models.ForeignKey(HostGroup)

    def __str__(self):
        return '%s => %s' % (self.hostname, self.group)

class Module(models.Model):
    module_name = models.CharField(max_length=50, unique=True, null=False)

    def __str__(self):
        return self.module_name

class Argument(models.Model):
    argument_text = models.CharField(max_length=100, unique=True, null=False)
    module = models.ForeignKey(Module)

    def __str__(self):
        return "%s => %s" % (self.module, self.argument_text)
2、生成数据库表
(djenv) [root@room8pc16 myansible]# python manage.py makemigrations
(djenv) [root@room8pc16 myansible]# python manage.py migrate
3、查看sqlite3数据库
(djenv) [root@room8pc16 myansible]# sqlite3 db.sqlite3
sqlite> .tables    # 列出所有的表
sqlite> .schema webansi_hostgroup   # 查看表结构

六、授权，将以http://127.0.0.1/webansi/开头的URL交给webansi应用处理
1、修改myansible/urls.py
from django.conf.urls import url, include
from django.contrib import admin

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^webansi/', include('webansi.urls')),
]
2、创建webansi/urls.py
from django.conf.urls import url

urlpatterns = [
]

七、制作首页http://127.0.0.1/
1、当访问首页时，使用应用中的视图函数进行响应
# myansible/urls.py
from django.conf.urls import url, include
from django.contrib import admin
from webansi import views

urlpatterns = [
    url(r'^$', views.index, name='index'),
    url(r'^admin/', admin.site.urls),
    url(r'^webansi/', include('webansi.urls')),
]
2、编写视图函数
# webansi/views.py
from django.shortcuts import render, HttpResponse

def index(request):
    return HttpResponse('<h1>Success</h1>')
3、启动django项目
(djenv) [root@room8pc16 myansible]# python manage.py runserver 0:80
4、修改函数，返回模板文件
from django.shortcuts import render

def index(request):
    return render(request, 'index.html')
5、编写模板文件
(1) 创建模板目录
(djenv) [root@room8pc16 myansible]# mkdir webansi/templates
(2) 拷贝boostrap的static目录到webansi目录下
(3) 编写index.html的基础信息
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>首页</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}">
    <style>
        .banner{
            background-image: url({% static 'imgs/banner.png' %});
            height: 100px;
            background-size: 100%;
        }
        .footer{
            height: 100px;
            line-height: 100px;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="banner"></div>
    <div class="main">
        aa bb cc dd
    </div>
    <div class="footer text-center h4">
        <a href="http://linux.tedu.cn">达内云计算学院</a> 客服电话：400-111-8989 邮箱：admin@tedu.cn
    </div>
</div>

<script src="{% static 'js/jquery.min.js' %}"></script>
<script src="{% static 'js/bootstrap.min.js' %}"></script>
</body>
</html>
6、引入模板继承
(1) 把index.html复制一份，起名为base.html
(2) 去除base.html中个性化的部分，结果如下：
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}{% endblock %}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}">
    <style>
        .banner{
            background-image: url({% static 'imgs/banner.png' %});
            height: 100px;
            background-size: 100%;
        }
        .footer{
            height: 100px;
            line-height: 100px;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="banner"></div>
    <div class="main">
        {% block content %}{% endblock %}
    </div>
    <div class="footer text-center h4">
        <a href="http://linux.tedu.cn">达内云计算学院</a> 客服电话：400-111-8989 邮箱：admin@tedu.cn
    </div>
</div>

<script src="{% static 'js/jquery.min.js' %}"></script>
<script src="{% static 'js/bootstrap.min.js' %}"></script>
</body>
</html>
(3) index.html继承模板
{% extends 'base.html' %}
{% load static %}
{% block title %}首页{% endblock %}
{% block content %}
    <div class="row text-center h4">
        <div class="col-md-3">
            <a href="#">
                <img width="150px" src="{% static 'imgs/linux.jpg' %}"><br>
                主机信息
            </a>
        </div>
        <div class="col-md-3">
            <a href="#">
                <img width="150px" src="{% static 'imgs/linux.jpg' %}"><br>
                添加主机
            </a>
        </div>
        <div class="col-md-3">
            <a href="#">
                <img width="150px" src="{% static 'imgs/linux.jpg' %}"><br>
                添加模块
            </a>
        </div>
        <div class="col-md-3">
            <a href="#">
                <img width="150px" src="{% static 'imgs/linux.jpg' %}"><br>
                执行任务
            </a>
        </div>
    </div>
{% endblock %}














