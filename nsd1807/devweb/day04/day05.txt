python api
1、激活虚拟环境
[root@room8pc16 mysite]# source /opt/djenv/bin/activate
2、进入项目目录，运行python shell
(djenv) [root@room8pc16 mysite]# python manage.py shell
>>> from polls.models import Question, Choice
3、每个模型默认都有一个管理器，叫objects，用来对数据进行增删改查
4、查看所有的Question实例
>>> Question.objects.all()
5、添加新的问题
(1) 通过新建实例的方式创建
>>> from django.utils import timezone
>>> q1 = Question(
            question_text='春节有什么计划？', pub_date=timezone.now()
         )
>>> q1.save()
(2) 通过objects管理器创建
>>> q2 = Question.objects.create(
            question_text='散伙饭去哪吃？', pub_date=timezone.now()
        )
6、添加新的选项
(1) 通过新建实例的方式
>>> c1 = Choice(choice_text='加班', question=q1)
>>> c1.save()
(2) 通过objects管理器创建
>>> c2 = Choice.objects.create(choice_text='回家过年', question=q1)
(3) 通过问题直接创建选项。具体的问题比如是q1(春节有什么计划？)，因为Choice类有
外键，那么问题就有多个选项，q1也有一个管理器叫choice_set，如果选项的类名是C，那
么q1的管理器就叫c_set。这个管理器对应的就是该问题所有的选项。
>>> q1.choice_set.create(choice_text='外出旅游，逃避回家被催婚')

7、通过get查询，get要求只能返回一个结果，这个结果是一个实例
(1) 通过主键查询
>>> Question.objects.get(pk=1)
(2) 通过id查询
>>> Question.objects.get(id=2)  # id=2是id__exact=2的简写
(3) 通过其他字段查询
>>> Question.objects.get(question_text='你计划到哪个城市找工作？')
(4) 如果返回的结果是多项，将出现异常
>>> Question.objects.get(id__gte=2)
(5) 如果查不到，也会抛出异常
>>> Question.objects.get(id__exact=8)

注：双下划线是属性，python常用的取出属性是句点表示，如'对象.属性'；在django的条
件里，属性都是使用双下划线
>>> astr = '你计划到哪个城市找工作？'
>>> astr.startswith('你计划')
>>> Question.objects.get(question_text__startswith='你计划')
>>> astr.endswith('工作？')
>>> Question.objects.get(question_text__endswith='工作？')

8、获得排序的结果
order_by返回的结果是很多对象构成的查询集
(1) 通过pub_date进行排序，默认升序
>>> Question.objects.order_by('pub_date')
(2) 以降序的方式排列
>>> Question.objects.order_by('-pub_date')
(3) 查看对应的sql语句
>>> r1 = Question.objects.order_by('pub_date')
>>> print(r1.query)
(4) 获得最新的一个问题。降序的第一个实例，或升序的最后一个实例。注意查询集不支持负数索引
>>> Question.objects.order_by('-pub_date')[0]  或
>>> r1 = Question.objects.order_by('pub_date')
>>> r1[len(r1) - 1]

9、条件过滤
>>> Question.objects.filter(pub_date__year=2018)
>>> r3 = Question.objects.filter(pub_date__year=2018)
>>> print(r3.query)
>>> r3 = Question.objects.filter(pub_date__year=2018).filter(pub_date__month=12)
>>> print(r3.query)

10、修改和删除：首先找到对应的实例，修改就是属性重新赋值，删除是把对象直接删除
>>> q1 = Question.objects.get(question_text='你心仪的公司哪家？')
>>> q1.question_text = '你期望哪家公司给你发Offer？'
>>> q1.save()
>>> c1 = Choice.objects.get(choice_text='广州')
>>> c1.delete()

完成首页
1、修改视图函数，使之真正在数据库中取得所有的问题
# polls/views.py
from django.shortcuts import render
from .models import Question

def index(request):
    questions = Question.objects.order_by('-pub_date')
    return render(request, 'index.html', {'questions': questions})
2、在模板中显示所有的问题
# polls/templates/index.html
<body>
<h1>投票首页</h1>
<hr>
{{ questions }}
</body>
3、使用模板语言修改index.html
模块语言中，变量使用{{ var }}格式。其他标签使用{% %}，在{% %}中，变量不需要使
用双花括号。
# polls/templates/index.html
<body>
<h1>投票首页</h1>
<hr>
{% for question in questions %}
    <p>
        {{ forloop.counter }}. {{ question.question_text }} {{ question.pub_date }}
    </p>
{% endfor %}
</body>
注：forloop.counter是循环的计数

4、为问题添加超链接
# polls/templates/index.html
<body>
<h1>投票首页</h1>
<hr>
{% for question in questions %}
    <p>
        {{ forloop.counter }}.
{#        <a href="/polls/{{ question.id }}/">{{ question.question_text }}</a>#}
        <a href="{% url 'detail' question_id=question.id %}">{{ question.question_text }}</a>
        {{ question.pub_date }}
    </p>
{% endfor %}
</body>


完成详情页
1、修改视图函数，将问题传递到模板文件
def detail(request, question_id):
    question = Question.objects.get(id=question_id)
    return render(request, 'detail.html', {'question': question})
2、修改模板文件，显示问题及其选项
<body>
<h1>投票详情</h1>
<hr>
<h2>{{ question.question_text }}</h2>
<ul>
    {% for choice in question.choice_set.all %}
        <li>{{ choice.choice_text }}</li>
    {% endfor %}
</ul>
</body>
3、修改投票详情页，创建form表单
(1) 当用户投票时，将投票的数据发送到http://127.0.0.1/polls/1/vote/
# polls/urls.py
    url(r'^(?P<question_id>\d+)/vote/$', views.vote, name='vote'),
(2) http://127.0.0.1/polls/1/vote/对应成一个函数。该函数可以将相应选项的
票数加1
(3) 修改投票详情页，将上一步的UL改写为表单
<body>
<h1>投票详情</h1>
<hr>
<h2>{{ question.question_text }}</h2>
<form action="{% url 'vote' question_id=question.id %}" method="post">
    {% for choice in question.choice_set.all %}
        <div>
            <label>
                <input type="radio" name="choice_id" value="{{ choice.id }}">
                {{ choice.choice_text }}
            </label>
        </div>
    {% endfor %}
    <input type="submit" value="投 票">
</form>
</body>
(4) 编写投票函数，投票后跳转到投票详情页
from django.shortcuts import render, redirect

def vote(request, question_id):
    question = Question.objects.get(id=question_id)
    # request.POST可以理解为一个字典，通过get方法获取表单提交的数据
    choice_id = request.POST.get('choice_id')
    choice = question.choice_set.get(id=choice_id)
    choice.votes += 1
    choice.save()
    return redirect('result', question_id=question_id)
注意：此处没有使用render而是redirect。render将会把request请求中的数据再发给
相应的页面。redirect是独立的，不会发送任何数据。
(5) 上一步完成后，提交表单时，出现403禁止访问，可以关闭CSRF功能
# mysite/settings.py
MIDDLEWARE = [
    ... ...
    # 'django.middleware.csrf.CsrfViewMiddleware',
    ... ...
]
到此步完成，已经可以实现投票功能了。

完成投票结果页
1、完成函数
def result(request, question_id):
    question = Question.objects.get(id=question_id)
    return render(request, 'result.html', {'question': question})
2、修改polls/templates/result.html
<body>
<h1>投票结果</h1>
<hr>
<h2>{{ question.question_text }}</h2>
<table border="1px">
    {% for choice in question.choice_set.all %}
        <tr>
            <td>{{ choice.choice_text }}</td>
            <td>{{ choice.votes }}</td>
        </tr>
    {% endfor %}
</table>
</body>















