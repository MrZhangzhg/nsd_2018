实现添加主机页面
1、url
# webansi/urls.py
    url(r'^addhosts/$', views.addhosts, name='addhosts'),

2、视图函数
# webansi/views.py
def addhosts(request):
    return render(request, 'addhosts.html')

3、创建模板
# webansi/templates/addhosts.html
{% extends 'base.html' %}
{% block title %}添加主机{% endblock %}
{% block content %}
添加主机
{% endblock %}

4、修改index.html的超链接
        <a href="{% url 'addhosts' %}" target="_blank">

5、修改addhosts.html，实现表单
<div style="margin-top: 20px">
    <form action="" method="post" class="form-inline">
        {% csrf_token %}
        <div class="form-group">
            <label>主机组：</label>
            <input type="text" class="form-control" name="group">
        </div>
        <div class="form-group">
            <label>主机：</label>
            <input type="text" class="form-control" name="host">
        </div>
        <div class="form-group">
            <label>IP地址：</label>
            <input type="text" class="form-control" name="ip">
        </div>
        <div class="form-group">
            <input class="btn btn-primary" type="submit" value="提 交">
        </div>
    </form>
</div>

6、修改视图函数，将主机和组发送到前台
def addhosts(request):
    groups = HostGroup.objects.all()
    return render(request, 'addhosts.html', {'groups': groups})

7、修改addhosts.html，增加表格数据
<div class="h4">
    <table class="table table-striped table-hover">
        <tr class="info">
            <td>主机组</td>
            <td>主机</td>
        </tr>
        {% for group in groups %}
            <tr>
                <td>{{ group.groupname }}</td>
                <td>
                    <ul class="list-unstyled">
                        {% for host in group.host_set.all %}
                            <li>{{ host.hostname }}: {{ host.ipaddr }}</li>
                        {% endfor %}
                    </ul>
                </td>
            </tr>
        {% endfor %}
    </table>
</div>

8、修改视图，实现创建主机的功能
def addhosts(request):
    if request.method == 'POST':
        groupname = request.POST.get('group').strip()
        hostname = request.POST.get('host').strip()
        ip = request.POST.get('ip').strip()
        if groupname:
            # get_or_create返回的是元组(组实例, True|False)
            group = HostGroup.objects.get_or_create(groupname=groupname)[0]
            if hostname and ip:
                group.host_set.get_or_create(hostname=hostname, ipaddr=ip)

    groups = HostGroup.objects.all()
    return render(request, 'addhosts.html', {'groups': groups})
注意：模板的form表单action=""，表示提交数据给自己



实现添加模块页面
1、url
    url(r'^addmodules/$', views.addmodules, name='addmodules'),
2、视图函数
# webansi/views.py
def addmodules(request):
    modules = Module.objects.all()
    return render(request, 'addmodules.html', {'modules': modules})
3、模板
# webansi/templates/addmodules.html
{% extends 'base.html' %}
{% block title %}添加模块{% endblock %}
{% block content %}
添加模块
{% endblock %}
4、修改index.html的超链接
        <a href="{% url 'addmodules' %}" target="_blank">
5、addmodules.html，实现表单
<div class="h4" style="margin-top: 20px">
    <form action="" method="post" class="form-inline">
        {% csrf_token %}
        <div class="form-group">
            <label>模块：</label>
            <input type="text" class="form-control" name="module">
        </div>
        <div class="form-group">
            <label>参数：</label>
            <input type="text" class="form-control" name="args">
        </div>
        <div class="form-group">
            <input class="btn btn-primary" type="submit" value="提 交">
        </div>
    </form>
</div>

6、addmodules.html，增加表格数据
<div class="h4">
    <table class="table table-striped table-hover">
        <tr class="info">
            <td>模块</td>
            <td>参数</td>
        </tr>
        {% for module in modules %}
            <tr>
                <td>{{ module.modulename }}</td>
                <td>
                    <ul class="list-unstyled">
                        {% for arg in module.argument_set.all %}
                            <li>{{ arg.arg_text }}</li>
                        {% endfor %}
                    </ul>
                </td>
            </tr>
        {% endfor %}
    </table>
</div>

7、修改视图，实现添加模块的功能
def addmodules(request):
    if request.method == 'POST':
        modulename = request.POST.get('module').strip()
        argument = request.POST.get('args').strip()
        if modulename:
            module = Module.objects.get_or_create(modulename=modulename)[0]
            if argument:
                module.argument_set.get_or_create(arg_text=argument)

    modules = Module.objects.all()
    return render(request, 'addmodules.html', {'modules': modules})


实现删除参数的功能
1、删除参数，可以给参数后面添加一个删除链接，链接就是一个URL。
访问这个URL，可以对应执行一个函数。通过函数删除相应的参数。
2、url
    url(r'^delarg/(?P<arg_id>\d+)/$', views.delarg, name='delarg'),
3、创建视图函数
from django.shortcuts import render, redirect
from .models import HostGroup, Module, Argument

def delarg(request, arg_id):
    argument = Argument.objects.get(id=arg_id)  # 取出参数实例
    argument.delete()  # 删除参数
    return redirect('addmodules')   # 跳转到addmodules

4、修改addmodules.html，添加删除按钮
<td>
    <ul class="list-unstyled">
        {% for arg in module.argument_set.all %}
            <li>
                <div class="col-sm-10">
                    {{ arg.arg_text }}
                </div>
                <div class="col-sm-2">
                    <a href="{% url 'delarg' arg_id=arg.id %}">
                        删除
                    </a>
                </div>
            </li>
        {% endfor %}
    </ul>
</td>



完成执行任务
1、url
    url(r'^tasks/$', views.tasks, name='tasks'),
2、视图函数
def tasks(request):
    groups = HostGroup.objects.all()
    modules = Module.objects.all()
    context = {'groups': groups, 'modules': modules}
    return render(request, 'tasks.html', context)
3、模板
{% extends 'base.html' %}
{% block title %}执行任务{% endblock %}
{% block content %}
执行任务
{% endblock %}
4、修改index.html的超链接
        <a href="{% url 'tasks' %}" target="_blank">

5、修改模板文件
详见addmodules.html









