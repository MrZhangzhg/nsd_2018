python开源web框架：
1、django : openstack->horizon
2、tornado
3、flask


python虚拟环境
可以理解为把python环境安装到一个文件夹中，以后安装python软件包就是把软件安装到这个
文件了。可以为每个项目都创建一个虚拟环境，在虚拟环境中部署软件。当项目完成后，这些
软件不再需要了，可以简单的把虚拟环境文件夹删除
1、创建虚拟环境
[root@room8pc16 day03]# python3 -m venv /opt/djenv/
2、激活虚拟环境
[root@room8pc16 day03]# source /opt/djenv/bin/activate
(djenv) [root@room8pc16 day03]#
3、在虚拟环境中安装软件包
(1) 在线安装
(djenv) [root@room8pc16 day03]# pip install django==1.11.6
(2) 离线安装
# cd dj_pkgs/
(djenv) [root@room8pc16 dj_pkgs]# pip install *


创建项目
1、创建
(djenv) [root@room8pc16 day04]# django-admin startproject mysite
(djenv) [root@room8pc16 day04]# cd mysite/
(djenv) [root@room8pc16 mysite]# tree .
.
├── manage.py   # 用于项目管理
└── mysite
    ├── __init__.py   # python2需要该文件，使mysite成为包
    ├── settings.py   # 配置
    ├── urls.py       # 程序的入口文件
    └── wsgi.py       # 部署django到apache时使用的部署文件

1 directory, 5 files
2、测试
django是用python语言做网站的。最终需要把做好的网站放到apache或nginx上对外提供
服务。为了方便看到网站的效果，django提供了一个测试web服务器，用于在开发过程中查
看制作的效果，这个开发服务器不应该应用在生产环境下。起动开发服务器的方法如下：
(djenv) [root@room8pc16 mysite]# python manage.py runserver
访问http://127.0.0.1:8000


pycharm设置
1、修改python的解释器，使之使用虚拟环境
File->settings->Project xxx->Project Interpreter
2、修改python，使之与django配合使用
File->settings->Language & Frameworks -> Django -> django root选择
外层mysite目录，settings找到mysite/settings.py


修改django配置
1、为项目创建数据库
[root@room8pc16 ~]# mysql -uroot -ptedu.cn
MariaDB [(none)]> CREATE DATABASE dj1811 DEFAULT CHARSET utf8;
2、修改配置
# mysite/settings.py
ALLOWED_HOSTS = '*'    # 允许所有的主机访问
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',   # 注释
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dj1811',
        'USER': 'root',
        'PASSWORD': 'tedu.cn',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_TZ = False
3、引入对mysql的支持
# mysite/__init__.py
import pymysql
pymysql.install_as_MySQLdb()

4、测试修改后的站点
(1) 关掉本机的http服务
[root@room8pc16 ~]# systemctl stop httpd
(2) 如果之前的django网站仍然在运行，按ctrl+c关闭
(3) 启动服务，使之运行在0.0.0.0的80端口
(djenv) [root@room8pc16 mysite]# python manage.py runserver 0:80
访问http://127.0.0.1


访问后台
１、生成后台数据库
(djenv) [root@room8pc16 mysite]# python manage.py makemigrations
(djenv) [root@room8pc16 mysite]# python manage.py migrate
2、创建管理员帐号
(djenv) [root@room8pc16 mysite]# python manage.py createsuperuser
3、访问后台
(djenv) [root@room8pc16 mysite]# python manage.py runserver 0:80
4、访问http://127.0.0.1/admin/


创建应用
1、可以将项目拆分成多个应用
2、多个应用可以组合到一起形成项目
3、应用一旦编写完成后，可以作为独立的功能，集成到不同的项目中

创建投票应用
1、创建名为polls的应用
(djenv) [root@room8pc16 mysite]# python manage.py startapp polls
2、集成应用到项目
# mysite/settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'polls',
]
3、规划网址
http://127.0.0.1/polls/   # 投票首页
http://127.0.0.1/polls/1/　　　# 1号问题投票详情
http://127.0.0.1/polls/1/result/　 #1号问题投票结果页
4、授权，以http://127.0.0.1/polls/开头的URL都由polls应用处理
# mysite/urls.py
from django.conf.urls import url, include
from django.contrib import admin

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^polls/', include('polls.urls')),
]
# vim polls/urls.py
from django.conf.urls import url

urlpatterns = [
]


创建首页
1、配置路由
# polls/urls.py
from django.conf.urls import url
from . import views   # 在当前目录(包)中导入views模块

# polls应用的正则表达式，从http://x.x.x.x/polls/后面开始匹配
urlpatterns = [
    # 首页用veiws.index函数响应，为这个URL起名为index
    url('^$', views.index, name='index'),
]
2、为首页创建index函数
# polls/views.py
from django.shortcuts import render

# 用户发送请求时，将会把请求作为第一个参数传递
def index(request):
    return render(request, 'index.html')
3、创建模板文件
(djenv) [root@room8pc16 mysite]# mkdir polls/templates
# polls/templates/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>投票首页</title>
</head>
<body>
<h1>投票首页</h1>
</body>
</html>
4、重启开发服务器，访问投票首页http://127.0.0.1/polls/

创建投票详情页
1、创建路由映射
# polls/urls.py
    # 将问题编号保存到question_id变量中，传递给veiws.detail函数
    url(r'^(?P<question_id>\d+)/$', views.detail, name='detail'),
2、创建视图函数
# polls/views.py
def detail(request, question_id):
    # 字典的key将成为变量名，字典的val成为变量值，发送到detail.html
    return render(request, 'detail.html', {'question_id': question_id})
3、创建模板文件
# polls/templates/detail.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>投票详请</title>
</head>
<body>
<h1>{{ question_id }}号问题投票详情</h1>
</body>
</html>
4、访问http://127.0.0.1/polls/3/


创建投票结果页
1、url
# polls/urls.py
    url(r'^(?P<question_id>\d+)/result/$', views.result, name='result'),
2、views
# polls/views.py
def result(request, question_id):
    return render(request, 'result.html', {'question_id': question_id})
3、template
# polls/templates/result.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>投票结果</title>
</head>
<body>
<h1>{{ question_id }}号问题投票结果</h1>
</body>
</html>
4、访问http://127.0.0.1/polls/6/result/


创建模型
1、规划表
问题表：问题ID、问题内容、发布时间
选项表：选项ID、选项内容、选项票数、问题ID
2、创建模型:仍然采用ORM的方式
MariaDB [dj1811]> show tables;
# polls/models.py
from django.db import models

class Question(models.Model):
    question_text = models.CharField(max_length=200, null=False, unique=True)
    pub_date = models.DateTimeField()

    def __str__(self):
        return "问题：%s" % self.question_text

class Choice(models.Model):
    choice_text = models.CharField(max_length=200, null=False)
    votes = models.IntegerField(default=0)
    q = models.ForeignKey(Question, on_delete=models.CASCADE)

    def __str__(self):
        return "%s=> %s" % (self.q, self.choice_text)
3、生成数据库中的表
(djenv) [root@room8pc16 mysite]# python manage.py makemigrations
(djenv) [root@room8pc16 mysite]# python manage.py migrate
MariaDB [dj1811]> show tables;
MariaDB [dj1811]> desc polls_question;
MariaDB [dj1811]> desc polls_choice;

4、分析
(1) 表名：应用名_类名，小写字母
(2) 字段名：如果用户没有指定主键，django自动为表创建了一个名为id的主键
其他字段名来自于class的类变量
(3) 外键字段名，来自于类变量加_id，比如外键类变量名为q，外键字段名就是q_id
如果外键类变量名为qestion，外键字段名就是question_id

修改models.py的外键名称，q => qestion
class Choice(models.Model):
    choice_text = models.CharField(max_length=200, null=False)
    votes = models.IntegerField(default=0)
    question = models.ForeignKey(Question, on_delete=models.CASCADE)

    def __str__(self):
        return "%s=> %s" % (self.question, self.choice_text)
把改变内容反馈到数据库
(djenv) [root@room8pc16 mysite]# python manage.py makemigrations
(djenv) [root@room8pc16 mysite]# python manage.py migrate
MariaDB [dj1811]> desc polls_choice;
发现原来的q_id已经成为了question_id


注册模型到后台管理页面
1、注册
# polls/admin.py
from django.contrib import admin
from .models import Question, Choice

admin.site.register(Question)
admin.site.register(Choice)
2、访问
http://127.0.0.1/admin/
在后面添加几个问题和选项










