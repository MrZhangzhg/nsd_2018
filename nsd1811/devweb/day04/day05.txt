python api
1、进入django python shell
(djenv) [root@room8pc16 mysite]# python manage.py shell
2、导入模型
>>> from polls.models import Question, Choice


创建问题
1、创建实例的方式
>>> q1 = Question(
    question_text='放假去哪玩？',
    pub_date='2019-05-06 09:00:00'
)
>>> q1.save()
2、使用objects管理器
django为每个模型都自动创建了一个名为objects的管理器，它有很多方法，可以实现对模型
的各种操作。
>>> q2 = Question.objects.create(
    question_text='Are you ok?',
    pub_date='2019-04-25 12:00:00'
)


创建选项
1、创建实例的方式
>>> c1 = Choice(choice_text='去长城看人', question=q1)
>>> c1.save()
2、使用objects管理器
>>> c2 = Choice.objects.create(choice_text='去杭州西湖看人', question=q1)
3、因为Question和Choice有主外键约束关系，一个问题可以有很多选项，选项的类名叫
Choice，django自动为问题创建了一个choice_set管理器，通过这个管理器可以操作指定
问题的选项。如果选项的类名叫xuangxiang，那么管理器名为xuanxiang_set。
>>> c3 = q1.choice_set.create(choice_text='去上海迪士尼看人')


删除
>>> c3.delete()
修改
>>> q1.question_text = '下次放假去哪玩？'
>>> q1.save()


查询
1、查询所有问题，返回所有问题的实例集合
>>> Question.objects.all()
2、查询所有的选项，返回所有选项的实例集合
>>> Choice.objects.all()
3、查询某一问题所有的选项
>>> q1
<Question: 问题：下次放假去哪玩？>
>>> q1.choice_set.all()
<QuerySet [<Choice: 问题：下次放假去哪玩？=> 去长城看人>, <Choice: 问题：下次放假去哪玩？=> 去杭州西湖看人>]>
4、查询全部问题，按pub_date升序排列
>>> Question.objects.order_by('pub_date')
5、查询全部问题，按pub_date降序排列
>>> Question.objects.order_by('-pub_date')
6、get查询时，要求只能得到一个结果，返回的是满足条件的实例，多于少于1个结果都报错
>>> Question.objects.get(id=1)  # 返回一个实例
>>> Question.objects.get(id__lt=1)  # 报错，没有查询到结果
>>> Question.objects.get(id__gt=1)  # 报错，结果多于1个
7、filter查询时，得到的是0到多个结果的集合
>>> Question.objects.filter(id=1)   # 返回集合，集合中只有一项
>>> Question.objects.filter(id__lt=1)  # 返回集合，集合是空的
>>> Question.objects.filter(id__gt=1)# 返回集合，集合有多项
>>> Question.objects.filter(id__gt=1).filter(id__lt=6).order_by('-pub_date')

8、过滤条件
在django中，过滤条件格式为：属性__操作符=值

id=1实际上是id__exact=1的简写
>>> Question.objects.get(id__exact=1)
<Question: 问题：从达内结业后，第一份工作，你期待的工资是多少？>

字符串有endswith方法，表示以什么作为结尾，但是django不用句点，而是用双下划线
>>> Choice.objects.filter(choice_text__endswith='看人')

pub_date有月份属性，也是用双下划线表示的
>>> Question.objects.filter(pub_date__month=4)



修改投票首页
1、修改index函数
from .models import Question

def index(request):
    questions = Question.objects.order_by('-pub_date')
    return render(request, 'index.html', {'questions': questions})

2、修改模板文件，显示所有问题
(1) 基本变量用{{}}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>投票首页</title>
</head>
<body>
<h1>投票首页</h1>
{{ questions }}
</body>
</html>
(2) 模板也有基本的模板语法，支持循环、判断等语句。
循环语句，在{% %}中间的变量不需要{{}}
{% for 变量 in 对象 %}

{% endfor %}
在花括号以外的字符，都由html处理
修改index.html的主体部分如下：
<body>
<h1>投票首页</h1>
{% for question in questions %}
    <div>
        {{ forloop.counter }}.
        {{ question.question_text }} {{ question.pub_date }}
    </div>
{% endfor %}
</body>









