python api
1、进入django python shell
(djenv) [root@room8pc16 mysite]# python manage.py shell
2、导入模型
>>> from polls.models import Question, Choice


创建问题
1、创建实例的方式
>>> q1 = Question(
    question_text='放假去哪玩？',
    pub_date='2019-05-06 09:00:00'
)
>>> q1.save()
2、使用objects管理器
django为每个模型都自动创建了一个名为objects的管理器，它有很多方法，可以实现对模型
的各种操作。
>>> q2 = Question.objects.create(
    question_text='Are you ok?',
    pub_date='2019-04-25 12:00:00'
)


创建选项
1、创建实例的方式
>>> c1 = Choice(choice_text='去长城看人', question=q1)
>>> c1.save()
2、使用objects管理器
>>> c2 = Choice.objects.create(choice_text='去杭州西湖看人', question=q1)
3、因为Question和Choice有主外键约束关系，一个问题可以有很多选项，选项的类名叫
Choice，django自动为问题创建了一个choice_set管理器，通过这个管理器可以操作指定
问题的选项。如果选项的类名叫xuangxiang，那么管理器名为xuanxiang_set。
>>> c3 = q1.choice_set.create(choice_text='去上海迪士尼看人')


删除
>>> c3.delete()
修改
>>> q1.question_text = '下次放假去哪玩？'
>>> q1.save()


查询
1、查询所有问题，返回所有问题的实例集合
>>> Question.objects.all()
2、查询所有的选项，返回所有选项的实例集合
>>> Choice.objects.all()
3、查询某一问题所有的选项
>>> q1
<Question: 问题：下次放假去哪玩？>
>>> q1.choice_set.all()
<QuerySet [<Choice: 问题：下次放假去哪玩？=> 去长城看人>, <Choice: 问题：下次放假去哪玩？=> 去杭州西湖看人>]>
4、查询全部问题，按pub_date升序排列
>>> Question.objects.order_by('pub_date')
5、查询全部问题，按pub_date降序排列
>>> Question.objects.order_by('-pub_date')
6、get查询时，要求只能得到一个结果，返回的是满足条件的实例，多于少于1个结果都报错
>>> Question.objects.get(id=1)  # 返回一个实例
>>> Question.objects.get(id__lt=1)  # 报错，没有查询到结果
>>> Question.objects.get(id__gt=1)  # 报错，结果多于1个
7、filter查询时，得到的是0到多个结果的集合
>>> Question.objects.filter(id=1)   # 返回集合，集合中只有一项
>>> Question.objects.filter(id__lt=1)  # 返回集合，集合是空的
>>> Question.objects.filter(id__gt=1)# 返回集合，集合有多项
>>> Question.objects.filter(id__gt=1).filter(id__lt=6).order_by('-pub_date')

8、过滤条件
在django中，过滤条件格式为：属性__操作符=值

id=1实际上是id__exact=1的简写
>>> Question.objects.get(id__exact=1)
<Question: 问题：从达内结业后，第一份工作，你期待的工资是多少？>

字符串有endswith方法，表示以什么作为结尾，但是django不用句点，而是用双下划线
>>> Choice.objects.filter(choice_text__endswith='看人')

pub_date有月份属性，也是用双下划线表示的
>>> Question.objects.filter(pub_date__month=4)



修改投票首页
1、修改index函数
from .models import Question

def index(request):
    questions = Question.objects.order_by('-pub_date')
    return render(request, 'index.html', {'questions': questions})

2、修改模板文件，显示所有问题
(1) 基本变量用{{}}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>投票首页</title>
</head>
<body>
<h1>投票首页</h1>
{{ questions }}
</body>
</html>
(2) 模板也有基本的模板语法，支持循环、判断等语句。
循环语句，在{% %}中间的变量不需要{{}}
{% for 变量 in 对象 %}

{% endfor %}
在花括号以外的字符，都由html处理
修改index.html的主体部分如下：
<body>
<h1>投票首页</h1>
{% for question in questions %}
    <div>
        {{ forloop.counter }}.
        {{ question.question_text }} {{ question.pub_date }}
    </div>
{% endfor %}
</body>

(3)继续修改index.html，为它加上超链接
<body>
<h1>投票首页</h1>
{% for question in questions %}
    <div>
        {{ forloop.counter }}.
{#        <a href="/polls/{{ question.id }}/" target="_blank">#}
        <a href="{% url 'detail' question_id=question.id %}" target="_blank">
            {{ question.question_text }}
        </a>
        {{ question.pub_date }}
    </div>
{% endfor %}
</body>

3、引入bootstrap
(1) 将前面课程中的static目录拷贝到polls目录下
(djenv) [root@room8pc16 mysite]# cp -r ../../day03/static/ polls/
(2) 修改index.html，说见index.html

4、实现模板扩展
项目中有多个HTML页面，为了保持页面风格一致，可以使用模板扩展。将共性内容写到基础
模板页面中。其他的各个页面先通过基础页面进行扩展，再写上个性内容即可。
(1) 创建base.html
拷贝index.html为base.html。再将base.html中个性化内容删除，用{% block %}代替
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}{% endblock %}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}">
</head>
<body>
<div class="container">
    <div id="linux-carousel" class="carousel slide">
        <ol class="carousel-indicators">
            <li class="active" data-target="#linux-carousel" data-slide-to="0"></li>
            <li data-target="#linux-carousel" data-slide-to="1"></li>
            <li data-target="#linux-carousel" data-slide-to="2"></li>
        </ol>
        <div class="carousel-inner">
            <div class="item active">
                <a href="http://www.sogou.com" target="_blank">
                    <img src="{% static 'imgs/first.jpg' %}">
                </a>
            </div>
            <div class="item">
                <img src="{% static 'imgs/second.jpg' %}">
            </div>
            <div class="item">
                <img src="{% static 'imgs/third.jpg' %}">
            </div>
        </div>
        <a href="#linux-carousel" data-slide="prev" class="carousel-control left">
            <span class="glyphicon glyphicon-chevron-left"></span>
        </a>
        <a href="#linux-carousel" data-slide="next" class="carousel-control right">
            <span class="glyphicon glyphicon-chevron-right"></span>
        </a>
    </div>
    {% block content %}{% endblock %}
    <div class="text-center text-primary h5" style="margin-top: 30px">
        <a href="">达内云计算 nsd1811</a>
    </div>
</div>

<script src="{% static 'js/jquery.min.js' %}"></script>
<script src="{% static 'js/bootstrap.min.js' %}"></script>
<script type="text/javascript">
    $('#linux-carousel').carousel({
        interval : 3000
    });
</script>
</body>
</html>
(2) 修改index.html，将共性内容删除，把个性内容写到block中
{% extends 'base.html' %}
{% load static %}
{% block title %}投票首页{% endblock %}
{% block content %}
    <h1 class="text-center text-warning">投票首页</h1>
    <div>
        {% for question in questions %}
        <div class="h4">
            {{ forloop.counter }}.
            <a href="{% url 'detail' question_id=question.id %}" target="_blank">
                {{ question.question_text }}
            </a>
            {{ question.pub_date }}
        </div>
    {% endfor %}
    </div>
{% endblock %}



编写detail页面
1、修改detail函数
def detail(request, question_id):
    question = Question.objects.get(id=question_id)
    return render(request, 'detail.html', {'question': question})

2、修改前台detail.html
{% extends 'base.html' %}
{% load static %}
{% block title %}投票详情{% endblock %}
{% block content %}
    <h1 class="text-center text-warning">
    {{ question.id }}号问题投票详情
    </h1>
    <div class="h4">
        <h3>{{ question.question_text }}</h3>
        <form action="" method="post">
            {% for choice in question.choice_set.all %}
                <div class="radio">
                    <label>
                        <input type="radio" name="choice_id" value="{{ choice.id }}">
                        {{ choice.choice_text }}
                    </label>
                </div>
            {% endfor %}
            <div class="form-group">
                <input class="btn btn-primary" type="submit" value="投 票">
            </div>
        </form>
    </div>
{% endblock %}


实现投票功能
1、投票时，需要执行函数，函数实现数据库中votes字段的修改
2、在django中，访问一个url，就可以实现调用某个函数
3、设计url
# polls/urls.py
    url(r'^(?P<question_id>\d+)/vote/$', views.vote, name='vote'),
4、在detail.html的form表单中加入action
action="{% url 'vote' question_id＝question.id %}"
5、创建视图函数
# polls/views.py
from django.shortcuts import render, redirect

def vote(request, question_id):
    question = Question.objects.get(id=question_id)  # 取出问题实例
    choice_id = request.POST.get('choice_id')  # 在表单提交的数据中取出选项id
    choice = question.choice_set.get(id=choice_id)  # 获取选项实例
    choice.votes += 1  # 选票值加1
    choice.save()  # 保存修改

    return redirect('result', question_id=question.id)

完成投票结果页
1、修改视图函数
def result(request, question_id):
    question = Question.objects.get(id=question_id)
    return render(request, 'result.html', {'question': question})

2、修改result.html
{% extends 'base.html' %}
{% load static %}
{% block title %}投票结果{% endblock %}
{% block content %}
    <h1 class="text-warning text-center">
        {{ question.id }}号问题投票结果
    </h1>
    <table class="table table-bordered table-striped table-hover h4">
        <tr class="text-center info">
            <td>选项</td>
            <td>票数</td>
        </tr>
        {% for choice in question.choice_set.all %}
            <tr>
                <td>{{ choice.choice_text }}</td>
                <td>{{ choice.votes }}</td>
            </tr>
        {% endfor %}
    </table>
{% endblock %}


修改投票详情
如果某个问题还没有选项，则显示尚未开始。
{% block content %}
    <h1 class="text-center text-warning">
    {{ question.id }}号问题投票详情
    </h1>
    <div class="h4">
        <h3>{{ question.question_text }}</h3>
        {% if question.choice_set.all %}
            <form action="{% url 'vote' question_id=question.id %}" method="post">
            {% for choice in question.choice_set.all %}
                <div class="radio">
                    <label>
                        <input type="radio" name="choice_id" value="{{ choice.id }}">
                        {{ choice.choice_text }}
                    </label>
                </div>
            {% endfor %}
            <div class="form-group">
                <input class="btn btn-primary" type="submit" value="投 票">
            </div>
        </form>
        {% else %}
            <h3 class="text-danger">尚未开始</h3>
        {% endif %}
    </div>
{% endblock %}







