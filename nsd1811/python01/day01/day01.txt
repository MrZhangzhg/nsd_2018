git配置
1、安装
# yum install -y git
2、填写个人信息
[root@node3 ~]# git config --list
[root@node3 ~]# git config --global user.name "Mr.Zhang"
[root@node3 ~]# git config --global user.email "zzg@163.com"
3、提交代码的时候，将会跳出文本编辑器，需要用户写入日志，指定默认的文本编辑器
[root@node3 ~]# git config --global core.editor vim
4、查看配置
[root@node3 ~]# git config --list
[root@node3 ~]# cat ~/.gitconfig

git的工作区域
工作区：程序文件所在的目录
暂存区：工作区和版本库之间的缓冲地带
版本库：将工作区的内容保存到的目录，是工作区的.git


git应用
1、创建版本库: 从0开始
# git init 项目目录
[root@node3 ~]# git init myproject
[root@node3 ~]# cd myproject/
[root@node3 myproject]# ls -a   # 有一个隐藏的.git目录
2、创建版本库：在已有目录中创建
# cd 项目目录
# git init .

3、在工作区编写程序文件
[root@node3 myproject]# echo 'Hello World' > hi.txt
4、将文件加入到暂存区
[root@node3 myproject]# git status   # 查看状态
[root@node3 myproject]# git add .    # 把当前目录所有文件加入到暂存区
5、如果有些文件是错误添加到暂存区的，可以将其撤出
[root@node3 myproject]# git rm --cache hi.txt
[root@node3 myproject]# git status
6、提交暂存区的文件到版本库
[root@node3 myproject]# git add .
[root@node3 myproject]# git commit   # 将会跳出vim，要求用户写入日志
[root@node3 myproject]# git status   # 干净的工作区

7、将新文件提交到版本库
[root@node3 myproject]# cp /etc/hosts .
[root@node3 myproject]# git status
[root@node3 myproject]# git add .
[root@node3 myproject]# git commit -m "add hosts"  # 在命令行提供日志信息
[root@node3 myproject]# git status
8、将误删除的工作区文件从版本库中检出
[root@node3 myproject]# rm -rf *   # 不会将隐藏的.git删掉
[root@node3 myproject]# git status
[root@node3 myproject]# git checkout -- *
[root@node3 myproject]# ls
hi.txt  hosts

分支管理
1、每个git项目默认的分支叫作master
[root@node3 myproject]# git branch
* master
2、如果你负责项目的一个功能，可以在某一个提交节点创建分支。注意，在创建分支的时候，
master分支应该是干净。
[root@node3 myproject]# git branch mybr1
[root@node3 myproject]# git branch
* master    # 有星号，表示当前处于master分支
  mybr1
3、在master分支提交代码
[root@node3 myproject]# cp /etc/passwd .
[root@node3 myproject]# git add .
[root@node3 myproject]# git commit -m "master-c1"
[root@node3 myproject]# git status
4、切换分支到mybr1
[root@node3 myproject]# git checkout mybr1
[root@node3 myproject]# ls   # 没有passwd文件
5、在mybr1分支编写程序
[root@node3 myproject]# echo '123456' > mytest
[root@node3 myproject]# git add .
[root@node3 myproject]# git commit -m "add mytest"
6、将mybr1分支汇入到主干
[root@node3 myproject]# git checkout master
[root@node3 myproject]# ls   # 有passwd，没有mytest
[root@node3 myproject]# git merge mybr1  # 将mybr1合并到master，将会跳出vim，要求写日志
[root@node3 myproject]# ls  # 可以查看到两个分支中全部的文件
hi.txt  hosts  mytest  passwd


gitlab服务器
1、新建一台虚拟机，内存4GB
node1.tedu.cn  192.168.4.1/24
2、安装docker
# yum install -y *.rpm
[root@node1 docker_pkgs]# systemctl start docker
[root@node1 docker_pkgs]# systemctl enable docker
3、导入gitlab镜像
# docker load < gitlab_zh.tar
4、修改宿主机ssh端口，因为容器也要用到22端口
[root@node1 images]# vim /etc/ssh/sshd_config
Port 2222
[root@node1 images]# systemctl restart sshd
5、启动容器
[root@node1 ~]# docker run -d -h gitlab --name gitlab \
 -p 443:443 -p 22:22 -p 80:80 --restart always \
 -v /srv/gitlab/config:/etc/gitlab -v \
 /srv/gitlab/logs:/var/log/gitlab \
 -v /srv/gitlab/data:/var/opt/gitlab gitlab_zh
6、因为gitlab容器比较消耗资源，所以启动需要花一定的时间
[root@node1 ~]# docker ps   # 直到显示(healthy)才能正常访问


配置gitlab
1、访问http://192.168.4.1/，第一次访问需要设置root的密码
2、关键概念
(1) 群组group，可以为一个团队创建一个group
(2) 成员member，为每一个用户创建一个帐号，成为group中的一个成员
(3) 项目project，一个团队可以开发很多项目
3、创建名为devops的group
群组路径: http://192.168.4.1/devops
群组名称: devops
可见等级：公开
4、创建用户
添写姓名、用户名、电子邮箱，其他保持默认
创建用户的时候，不能设置密码。用户创建完毕后，编辑用户，可以修改密码。
5、创建名为myproject的项目
项目路径：http://192.168.4.1/devops/myproject
可见等级：公开

6、授权：允许新建的用户对项目有写入权限
找到项目后，点击左下角的“设置” -> “成员”
选择要邀请的成员：第4步创建用的用户
选择角色权限：主程序员

7、配置新建用户可以免密推送代码
(1) 退出root用户
(2) 使用新建帐号登陆，用户第一次登陆，需要修改密码
(3) 点击右上角用户图标 -> 设置 -> 点击左下角ssh密钥
[root@node3 ~]# ssh-keygen -t rsa -C "zzg@163.com" -b 4096
[root@node3 ~]# cat .ssh/id_rsa.pub
# 把公钥内容复制web页面中的ssh密钥文本框中
到此为止，gitlab服务器配置完成


程序员推送代码到服务器
[root@node3 ~]# cd myproject/
[root@node3 myproject]# git remote rename origin old-origin
以下错误可忽略：
error: 不能重命名配置小节 'remote.origin' 到 'remote.old-origin'
# git remote add origin git@192.168.4.1:devops/myproject.git
# git push -u origin --all
如果推送失败，错误中有一项显示Permission denied，解决办法是：
[root@node3 myproject]# eval $(ssh-agent)
[root@node3 myproject]# git push -u origin --all   # 再次推送


代码有更新，推送新代码到服务器
[root@node3 myproject]# echo 'how are you?' > welcome.txt
[root@node3 myproject]# git add .
[root@node3 myproject]# git commit -m "add welcome.txt"
[root@node3 myproject]# git push




python语法：
1、完全靠缩进，表达代码逻辑。需要缩进时，输入4个空格
[root@room8pc16 day01]# python3
>>> print('Hello World!')
>>>  print('Hello World!')   # 开头多了一个空格，将会报错
>>> if 3 > 0:
...     print('yes')
>>> if 3 > 0:
... print('yes')    # 没有空格，也会报错，因为if 3 > 0:需要子代码，但是这里的print与if平级

2、注释：在pycharm中，选中要注释的行，按ctrl + /

3、input注意事项：input读入的内容一定是字符类型
>>> num = input('number: ')
number: 100
>>> num + 5   # 报错，不能把字符串和数字直接相加，需要相同类型做运算
>>> num + str(5)  # str(5)把数字5转换成字符5，字符串相加就是简单的拼接
'1005'
>>> num + '5'
'1005'
>>> int(num) + 5   # int(num)把字符串转换成整数100
105
















