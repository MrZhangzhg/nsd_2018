常量：不会变化
变量：值可以改变的量

变量名称的要求：
1、首字符必须是字母或下划线
2、其他他字符可以是字母、数字或下划线
3、区分大小写
以下变量名哪些合法？
_ -> 合法
2a -> 不合法
abc-123 -> 不合法

变量注意事项：
1、变量在使用之前，必须先赋值！！！
2、看到变量的时候，要想到它的值
3、变量不能是关键字

推荐采用的全名方法
–  变量名全部采用小写字母   pythonstring
–  简短、有意义           pystr
–  多个单词间用下划线分隔   py_str
–  变量名用名词,函数名用谓词(动词+名词)   phone / update_phone
–  类名采用驼峰形式   MyClass

变量赋值
1、自右向左进行
>>> a = 3
>>> a = 10 + 5
>>> a = a + 1  # 先计算＝号右边，把a值15取出和1相加，结果再赋值给a
>>> a += 1   # 表达的意思与上面相同
>>> a++   # 浯法错误，python不支持此种写法
2、运算符
>>> 5 / 3    #1.6666666666666667
>>> 5 // 3   # 1 商
>>> 5 % 3    # 2 余数
>>> divmod(5, 3)    # (1, 2) 同时得到商和余数
>>> 2 ** 3   # 8   2的3次方
>>> 10 < 15 < 20    # True  python支持连续比较
>>> 10 < 20 and 20 > 15   # and两边结果都为True，最终才是True





python之禅
>>> import this
美胜丑、明胜暗、简胜繁



数据类型：
1、数字：
  整数：1、2、3、-1223
  布尔数：也是整数  True->1  False->0
  浮点数：1.23
  复数：数学家为了解决谁的平方等于-1，创建了复数
python默认采用10进制数表示数字，可以加上不同的前缀表示其他进制
>>> 11   # 11   10进制
>>> 0o11  # 9    8进制
>>> 0x11   # 17   16进制
>>> 0b11   # 3    2进制

2、字符串
（1）在引号之间的字符都是字符串，使用单双引号无区别
>>> 'tom\'s pet is a cat'
>>> "tom's pet is a cat"
>>> "I am %s" % 'jerry'
'I am jerry'
>>> "%s is %s years old" % ('tom', 20)
'tom is 20 years old'
（2）三引号，可以保留输入格式
>>> words="""hello
... hi
... greet"""
>>> print(words)
hello
hi
greet
>>> words
'hello\nhi\ngreet'
(3)字符串切片
>>> py_str = 'python'
>>> len(py_str)    # 6
>>> py_str[0]   # []称作取下标，第一个字符的下标是0
'p'
>>> 'python'[0]
'p'
>>> py_str[5]   # 取出最后一个字符
'n'
>>> py_str[-1]   # 从右向左取也可以用负数，-1是最后一个字符
'n'
>>> py_str[2:4]  # 取切片，起始下标对应的字符包含，结束的不包含
'th'
>>> py_str[2:]   # 结束不写，表示取到结尾
'thon'
>>> py_str[:2]   # 开头不写，表示从开头取
'py'
>>> py_str[::2]   # 设置步长为2
'pto'
>>> py_str[1::2]
'yhn'
>>> py_str[::-1]   # 步长值为负，表示自右向左取
'nohtyp'
(4) 拼接和重复
>>> py_str + '123'
'python123'
>>> '#' * 50
>>> 'ab' * 20
(5) 成员关系判断
>>> 't' in py_str
>>> 'th' in py_str
>>> 'to' not in py_str

列表：
>>> alist = [10, 20, 30, 'tom', 'jerry']
>>> len(alist)
>>> alist[0]
>>> alist[3:]
>>> 10 in alist
>>> alist[0] = 100   # 将第一项重新赋值
>>> alist
>>> alist.append('bob')   # 在列尾部追加新值
>>> alist

元组：可以认为是静态的列表
>>> atuple = (100, 20, 30, 'tom', 'jerry', 'bob')
>>> atuple[0] = 10  # 不支持将某一元素重新赋值
>>> atuple[:3]
>>> 20 in atuple

字典
>>> adict = {'name': 'bob', 'age': 22}
>>> len(adict)
2
>>> 22 in adict   # 22是字典的key吗？
False
>>> 'age' in adict
True
>>> adict['name']  # 字典没有下标，通过key取出value
'bob'
>>> adict['age'] = 23   # 修改值，因为age已经在字典里了
>>> adict['email'] = 'bob@tedu.cn'   # email不在字典中，则添加一个项目


数据类型比较
•  按存储模型分类
    –  标量类型:数值、字符串
    –  容器类型:列表、元组、字典
•  按更新模型分类:
    –  可变类型:列表、字典
    –  不可变类型:数字、字符串、元组
•  按访问模型分类
    –  直接访问:数字
    –  顺序访问:字符串、列表、元组
    –  映射访问:字典


>>> a = 10
>>> b = 20
>>> if a < b:
...     s = a
... else:
...     s = b
以上的4行，可以简写为以下的一行
>>> small = a if a < b else b

>>> import random
>>> random.choice(['aaa', 'bbb', 'ccc', 'ddd'])   # 随机从列表中选出一项












