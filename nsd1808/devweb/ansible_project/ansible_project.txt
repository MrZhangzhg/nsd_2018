ansible项目
一、功能设计
1、显示所有服务器的信息
2、添加主机/主机组
3、添加模块及参数
4、执行任务
二、创建项目
1、创建项目
(djenv) [root@room8pc16 ansible_project]# django-admin startproject myansible
2、创建应用
(djenv) [root@room8pc16 ansible_project]# cd myansible/
(djenv) [root@room8pc16 myansible]# python manage.py startapp webansi
3、修改配置
# myansible/settings.py
ALLOWED_HOSTS = '*'
INSTALLED_APPS = [
    ... ...
    'webansi',
]
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_TZ = False
4、配置pycharm
5、URL规划
http://x.x.x.x/                     =>显示各个功能链接
http://x.x.x.x/webansi/             =>显示服务器信息
http://x.x.x.x/webansi/addhosts/    =>添加/显示主机
http://x.x.x.x/webansi/addmodules/  =>添加/显示模块
http://x.x.x.x/webansi/tasks/       =>执行任务
6、授权
# myansible/urls.py
from django.conf.urls import url, include
from django.contrib import admin

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^webansi/', include('webansi.urls')),
]

# vim webansi/urls.py
from django.conf.urls import url

urlpatterns = [
]

三、编写应用
1、URL规划
http://x.x.x.x/                     =>显示各个功能链接
http://x.x.x.x/webansi/             =>显示服务器信息
http://x.x.x.x/webansi/addhosts/    =>添加/显示主机
http://x.x.x.x/webansi/addmodules/  =>添加/显示模块
http://x.x.x.x/webansi/tasks/       =>执行任务
2、创建模型
(1) 主机相关的模型
主机组、主机名、ip地址
# webansi/models.py
from django.db import models

class HostGroup(models.Model):
    group_name = models.CharField(max_length=50, unique=True, null=False)

    def __str__(self):
        return self.group_name

class Host(models.Model):
    hostname = models.CharField(max_length=50, unique=True)
    ipaddr = models.CharField(max_length=15)
    group = models.ForeignKey(HostGroup)

    def __str__(self):
        return "%s => %s" % (self.hostname, self.group)
(2) 模块相关模型
# webansi/models.py
class Module(models.Model):
    module_name = models.CharField(max_length=50, unique=True, null=False)

    def __str__(self):
        return self.module_name

class Argument(models.Model):
    argument_text = models.CharField(max_length=100, null=False)
    module = models.ForeignKey(Module)

    def __str__(self):
        return "%s => %s" % (self.module, self.argument_text)

3、生成数据库
本例采用的是文件型数据库，一个文件就是一个数据库。默认django在manage.py所在
的目录下将会创建名为db.sqlite3的数据库
(djenv) [root@room8pc16 myansible]# python manage.py makemigrations
(djenv) [root@room8pc16 myansible]# python manage.py migrate
(djenv) [root@room8pc16 myansible]# sqlite3 db.sqlite3
sqlite> .tables    # 列出所有的表
sqlite> .schema webansi_host    # 表结构

4、注册模型到后台
# webansi/admin.py
from django.contrib import admin
from .models import HostGroup, Host, Module, Argument

for item in [HostGroup, Host, Module, Argument]:
    admin.site.register(item)

5、创建管理员
(djenv) [root@room8pc16 myansible]# python manage.py createsuperuser
(djenv) [root@room8pc16 myansible]# python manage.py runserver 0:80
访问http://127.0.0.1/admin/

6、新建3台虚拟机
node4.tedu.cn   192.168.4.4/24
node5.tedu.cn   192.168.4.5/24
node6.tedu.cn   192.168.4.6/24
配置好YUM/IP/免密登陆









