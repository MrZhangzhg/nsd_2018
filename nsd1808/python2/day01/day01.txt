python语法风格布局：
#!/usr/bin/env python3
'描述该模块的功能等'
import string    # 导入模块

all_chs = string.ascii_letters + string.digits  # 全局变量

class MyClass:    # 类的定义
    pass

def my_function():    # 函数定义
    pass

if __name__ == '__main__':
    my_function()

列表模拟栈结构：
1、程序是交互的，思考屏幕上有什么提示，用户怎么做答
(0) push it
(1) pop it
(2) view it
(3) quit
Please input your choice(0/1/2/3): 2
[]
(0) push it
(1) pop it
(2) view it
(3) quit
Please input your choice(0/1/2/3): 0
item to push: hello
(0) push it
(1) pop it
(2) view it
(3) quit
Please input your choice(0/1/2/3): 2
['hello']
(0) push it
(1) pop it
(2) view it
(3) quit
Please input your choice(0/1/2/3): 1
from stack popped hello
(0) push it
(1) pop it
(2) view it
(3) quit
Please input your choice(0/1/2/3): 3
Bye-bye
2、思考程序有哪些功能，将这些功能定义成函数，编写程序框架
3、在主程序中调用相关函数
4、逐个编写具体的函数


字典：映射类型，key不能重复
注意：字典的key必须是不可变元素
>>> adict = {}
>>> adict = {'name': 'bob', 'age': 22}
>>> cdict = dict()
>>> ddict = dict(['ab', ('name', 'alice'), ['age', 18]])
>>> edict = {}.fromkeys(['tom', 'jerry'], 10)

>>> for key in ddict:
...     print('%s: %s' % (key, ddict[key]))
>>> '%(name)s is %(age)s years old' % ddict
>>> for key in ddict.keys():
...   print(key)
>>> for val in ddict.values():
...     print(val)
>>> for key, val in ddict.items():
...     print('%s: %s' % (key, val))

>>> adict.pop('age')   # 通过key弹出某一项
>>> fdict = adict.copy()
>>> adict.get('name')   # 通过key get它的val，重要方法
>>> print(adict.get('age'))  # 如果key不存在，默认返回None
>>> adict.get('age', 'not found')  # 如果key不存在，可以自定义返回值
>>> adict.get('name', 'not found')  # key存在，返回val
>>> adict['name'] = 'tom'   # 更新字典
>>> adict.setdefault('name', 'bob')   # name已存在，不会改变其值
>>> adict.setdefault('age', 20)  # age不在字典中，才向字典加入新值
>>> adict.update({'phone': '13344556677'})





















