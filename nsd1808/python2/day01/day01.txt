python语法风格布局：
#!/usr/bin/env python3
'描述该模块的功能等'
import string    # 导入模块

all_chs = string.ascii_letters + string.digits  # 全局变量

class MyClass:    # 类的定义
    pass

def my_function():    # 函数定义
    pass

if __name__ == '__main__':
    my_function()

列表模拟栈结构：
1、程序是交互的，思考屏幕上有什么提示，用户怎么做答
(0) push it
(1) pop it
(2) view it
(3) quit
Please input your choice(0/1/2/3): 2
[]
(0) push it
(1) pop it
(2) view it
(3) quit
Please input your choice(0/1/2/3): 0
item to push: hello
(0) push it
(1) pop it
(2) view it
(3) quit
Please input your choice(0/1/2/3): 2
['hello']
(0) push it
(1) pop it
(2) view it
(3) quit
Please input your choice(0/1/2/3): 1
from stack popped hello
(0) push it
(1) pop it
(2) view it
(3) quit
Please input your choice(0/1/2/3): 3
Bye-bye
2、思考程序有哪些功能，将这些功能定义成函数，编写程序框架
3、在主程序中调用相关函数
4、逐个编写具体的函数


字典：映射类型，key不能重复
注意：字典的key必须是不可变元素
>>> adict = {}
>>> adict = {'name': 'bob', 'age': 22}
>>> cdict = dict()
>>> ddict = dict(['ab', ('name', 'alice'), ['age', 18]])
>>> edict = {}.fromkeys(['tom', 'jerry'], 10)

>>> for key in ddict:
...     print('%s: %s' % (key, ddict[key]))
>>> '%(name)s is %(age)s years old' % ddict
>>> for key in ddict.keys():
...   print(key)
>>> for val in ddict.values():
...     print(val)
>>> for key, val in ddict.items():
...     print('%s: %s' % (key, val))

>>> adict.pop('age')   # 通过key弹出某一项
>>> fdict = adict.copy()
>>> adict.get('name')   # 通过key get它的val，重要方法
>>> print(adict.get('age'))  # 如果key不存在，默认返回None
>>> adict.get('age', 'not found')  # 如果key不存在，可以自定义返回值
>>> adict.get('name', 'not found')  # key存在，返回val
>>> adict['name'] = 'tom'   # 更新字典
>>> adict.setdefault('name', 'bob')   # name已存在，不会改变其值
>>> adict.setdefault('age', 20)  # age不在字典中，才向字典加入新值
>>> adict.update({'phone': '13344556677'})

\r表示回车不换行
########################
@#######################
#@######################
##@#####################

在线安装模块
# pip install 模块
[root@room8pc16 day01]# pip3 install tqdm

集合：由不同的不可变元素构成，它像是没有值的字典
>>> aset = set('abc')
>>> bset = set('bcd')
>>> len(aset)
>>> for ch in aset:  print(ch)
>>> aset & bset   # 交集，两个集合都有的元素
>>> aset | bset   # 并集，两个集合中的全部元素
>>> aset - bset   # 差补，只在aset中存在的元素

>>> cset = set('hello')
>>> cset.add('new')
>>> cset.update('new')
>>> cset.update(['abc', 'hello'])
>>> dset = set('hello')
>>> dset.issubset(cset)  # dset是cset的子集吗？
>>> cset.issuperset(dset)   # cset是dset的超集吗？
>>> aset.intersection(bset)   # aset & bset
>>> aset.difference(bset)   # aset - bset
>>> aset.union(bset)    # aset | bset

表示时间的方式：
时间戳：1970-1-1 0:00:00 到某一时间点间的秒数
UTC：世界协调时间
九元组：年、月、日、时、分、秒、一年中的第几周、一年中的第几天、是否是夏季节约时间
>>> import time
>>> time.time()   # 当前时间的时间戳
>>> time.ctime()   # 当前时间的UTC时间
>>> time.localtime()  # 当前时间的九元组
>>> time.sleep(1)
>>> t = time.localtime()
>>> t.tm_year
>>> t.tm_yday
>>> time.strftime('%Y-%m-%d')
>>> time.strftime('%Y-%m-%d %H:%M:%S')
>>> time.strftime('%a')
>>> time.strftime('%A')

>>> import datetime
>>> datetime.datetime.now()
>>> from datetime import datetime
>>> datetime.now()   # 返回的对象有年、月、日、时、分、秒、毫秒这些属性
>>> t = datetime.now()
>>> t.year    # 属性：年

计算时间的差额，如60天之前、之后是哪一天
>>> from datetime import datetime, timedelta
>>> t = datetime.today()
>>> days = timedelta(days=60)
>>> t - days
>>> t + days
>>> t1 = t + days
>>> t1.month
>>> t1.day

异常处理
当程序在运行过程中，如果发生错误，程序将崩溃、终止执行，程序抛出异常。


pickle模块
文件的常规write方法只能把字符串写入文件，不能把其他数据类型写入文件
pickle允许把任意的数据类型写入文件，将来还可以无损的取出
>>> import pickle
>>> fobj = open('/tmp/mydata', 'wb')
>>> shopping_list = ["egg", "apple", "banana"]
>>> pickle.dump(shopping_list, fobj)
>>> fobj.close()

>>> import pickle
>>> with open('/tmp/mydata', 'rb') as fobj:
...     mylist = pickle.load(fobj)
>>> type(mylist)


os模块
>>> import os
>>> os.getcwd()   # pwd
>>> os.listdir()   # ls
>>> os.mkdir('/tmp/demo')
>>> os.listdir('/tmp/demo')
>>> os.chdir('/tmp/demo')   # cd /tmp/demo
>>> os.symlink('/etc/hosts', '/tmp/demo/zhuji')  # ln -s /etc/hosts /tmp/demo/zhuji
>>> os.mknod('hi.txt')   # touch hi.txt
>>> os.chmod('hi.txt', 0o600)
>>> os.path.isfile('/etc')  # 是文件吗？
>>> os.path.isdir('/etc')   # 是目录吗？
>>> os.path.islink('/etc')   # 是软链接吗？
>>> os.path.exists('/etc')   # 存在吗？
>>> os.path.abspath('hi.txt')   # 得到当前目录下文件的绝对路径
>>> os.path.basename('/tmp/demo/hi.txt')   # hi.txt
>>> os.path.dirname('/tmp/demo/hi.txt')    # '/tmp/demo'
>>> os.path.split('/tmp/demo/hi.txt')   # ('/tmp/demo', 'hi.txt')
>>> os.path.join('/tmp/demo', 'hi.txt')    # '/tmp/demo/hi.txt'
>>> os.path.getsize('/etc/passwd')   # 文件大小


























