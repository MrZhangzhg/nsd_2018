fork服务器：父进程负责生成子进程，子进程与客户端通信
父进程接收到客户端连接后，生成子进程，父子进程都有服务器套接字和客户机套接字，
父进程用不到客户机套接字，可以将其关闭；同理子进程也可以将服务器套接字关闭

《python基础教程 第三版》

程序：存储在磁盘上的可执行文件
进程：加载到内存中的一系列指令，每个进程有自己的运行空间
线程：轻量级进程，一个进程可以包含多个线程。进程内的线程共享进程的内存空间


多线程编程：
1、主线程和工作线程
2、主线程负责生成工作线程
3、工作线程做具体的工作，不会产生僵尸进程

windows只支持多线程，没有多进程

GIL: Global Interpreter Lock全局解释器锁
GIL限制某一时刻只能有一个线程使用解释器

CPU密集型（计算密集型）应用：多进程适合、多线程不能提升效率
IO密集型应用：多进程和多线程都可以提升效率


pymysql:
1、安装
# cd pymysql_pkgs/
# pip3 install *
2、数据库
为一个小公司设计数据库，要求存储员工基本信息和工资情况
字段：
员工ID	姓名	性别	出生日期	联系方式	部门	工资日期	基本工资	奖金	工资总额
数据库表应该尽量减少冗余：重复录入、占空间、容易造成数据不一致
可以通过分表实现减少冗余
员工表：
员工ID	姓名	性别	出生日期	联系方式	部门ID
部门表：
部门ID 部门名称
工资表：
员工ID 工资日期	基本工资	奖金	工资总额
数据库范式：
所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，
所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项
根据1NF，联系方式需要进一步拆分：家庭住址、email、电话号码
第二范式（2NF）是在第一范式（1NF）的基础上建立起来的。
第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分。
根据2NF，需要给工资表加上一个主键。没有合适的，可以使用“行号”
第三范式（3NF）第三范式就是属性不依赖于其它非主属性。
根据3NF，总工资不应该出现在数据库中
经过这三个范式，确定最终的三张表字段如下：
员工表：
员工ID 姓名	性别	出生日期	email 部门ID
部门表：
部门ID 部门名称
工资表：
auto_id 员工ID 工资日期	基本工资	奖金

3、应用
[root@room8pc16 day02]# mysql -uroot -ptedu.cn
MariaDB [(none)]> CREATE DATABASE nsd1809 DEFAULT CHARSET utf8;


MariaDB [(none)]> USE nsd1809;
MariaDB [nsd1809]> SHOW TABLES;
MariaDB [nsd1809]> DESC departments;

4、CRUD
C: Create创建
R: Retrieve查询
U: Update更新
D: Delete删除


