CI/CD:
一、程序员编写项目代码
1、本地编写代码
[root@room8pc16 day05]# mkdir /tmp/nsd1809
[root@room8pc16 day05]# cd /tmp/nsd1809
[root@room8pc16 nsd1809]# echo '<h1>Hello World!</h1>' > index.html
2、加入git管理
[root@room8pc16 nsd1809]# git init .   # 初始化
[root@room8pc16 nsd1809]# git add .    # 将当前目录所有文件存入暂存区
[root@room8pc16 nsd1809]# git commit -m "myproject 1.0"  # 存入版本库
3、打标签
[root@room8pc16 nsd1809]# git tag 1.0   # 将当前状态标记为1.0版本
[root@room8pc16 nsd1809]# git tag    # 查看
4、继续开发，编写代码
[root@room8pc16 nsd1809]# echo '<h2>新版本加入一行</h2>' >> index.html
5、提交到版本库，并打标签
[root@room8pc16 nsd1809]# git add .
[root@room8pc16 nsd1809]# git commit -m "myproject 2.0"
[root@room8pc16 nsd1809]# git tag 2.0

二、推送代码到gitlab服务器
1、配置gitlab
群组Group：为每一个团队创建一个组
项目Project：每个团队都可能创建多个软件项目
成员Member：每个组都有多个成员，一个项目不一定需要所有成员参与

创建一个名为devops的组，在该项目下创建名为nsd1809的项目。
创建一个用户，配置该用户是nsd1809项目的主程序员。
2、推送本地代码到服务器
[root@room8pc16 nsd1809]# cd /tmp/nsd1809/
[root@room8pc16 nsd1809]# git remote rename origin old-origin
如果出现以下错误，忽略即可
error: 不能重命名配置小节 'remote.origin' 到 'remote.old-origin'
[root@room8pc16 nsd1809]# git remote add origin http://192.168.4.1/devops/nsd1809.git
[root@room8pc16 nsd1809]# git push -u origin --all
[root@room8pc16 nsd1809]# git push -u origin --tag

三、jenkins拉取gitlab服务器上的代码
1、创建一个freestyle自由风格的项目
2、参数化构建过程 => git parameter =>
 name: webver, default value: origin/master(origin仓库/master分支)
=> 源码管理 git, Repository URL: http://192.168.4.1/devops/nsd1809.git
如果jenkins服务器上没有git，需要yum install -y git =>
Branch Specifier (blank for 'any'): $webver =>
3、执行工程
点击 Build with Parameters => 选择1.0 => 开始构建
4、查看下载到的本地目录
[root@node4 ~]# ls /var/lib/jenkins/workspace/
myweb
[root@node4 ~]# ls /var/lib/jenkins/workspace/myweb/
index.html
[root@node4 ~]# cat /var/lib/jenkins/workspace/myweb/index.html
<h1>Hello World!</h1>

5、调整项目，下载的软件放到子目录中
点开jenkins的工程 => 左侧的“配置” => 	Additional Behaviours:
checkout to a subdirectory : Local subdirectory for repo: myweb-$webver
6、重新构建项目
[root@node4 ~]# rm -rf /var/lib/jenkins/workspace/myweb/
再次构建项目Build with Parameters
[root@node4 ~]# ls /var/lib/jenkins/workspace/myweb/

7、为了方便应用服务器到jenkins上下载软件包，在jenkins上安装apache
[root@node4 ~]# yum install -y httpd
[root@node4 ~]# systemctl start httpd
[root@node4 ~]# systemctl enable httpd
8、创建保存软件包的目录
[root@node4 ~]# mkdir -pv /var/www/html/deploy/packages
[root@node4 ~]# chown -R jenkins /var/www/html/deploy/

9、修改jenkins工程
将下载的软件放到/var/www/html/deploy/packages目录下，并压缩
构建 => 增加构建步骤 => 执行shell
appdir=/var/www/html/deploy
cp -r myweb-$webver $appdir/packages/
cd $appdir/packages/
rm -rf myweb-$webver/.git
tar czf myweb-$webver.tar.gz myweb-$webver
md5sum myweb-$webver.tar.gz | awk '{print $1}' > myweb-$webver.tar.gz.md5
rm -rf myweb-$webver

10、重新构建

11、生成当前版本和前一个版本的说明文件
appdir=/var/www/html/deploy
cp -r myweb-$webver $appdir/packages/
cd $appdir/packages/
rm -rf myweb-$webver/.git
tar czf myweb-$webver.tar.gz myweb-$webver
md5sum myweb-$webver.tar.gz | awk '{print $1}' > myweb-$webver.tar.gz.md5
rm -rf myweb-$webver
cd $appdir
[ -f live_version ] && cat live_version > last_version
echo $webver > live_version
12、重新构建


####################################
git分支应用：
[root@room8pc16 zzg_pypkgs]# git init /tmp/mygit
[root@room8pc16 zzg_pypkgs]# cd /tmp/mygit
[root@room8pc16 mygit]# cp /etc/hosts .
[root@room8pc16 mygit]# git add .
[root@room8pc16 mygit]# git commit -m "c1"
[root@room8pc16 mygit]# cp /etc/issue .
[root@room8pc16 mygit]# git add .
[root@room8pc16 mygit]# git commit -m "c2"
[root@room8pc16 mygit]# cp /etc/passwd .
[root@room8pc16 mygit]# git add .
[root@room8pc16 mygit]# git commit -m "c3"
[root@room8pc16 mygit]# git branch   # 查看分支
[root@room8pc16 mygit]# git branch b1   # 创建新分支b1
[root@room8pc16 mygit]# git branch
[root@room8pc16 mygit]# cp /etc/selinux/config .
[root@room8pc16 mygit]# git add .
[root@room8pc16 mygit]# git commit -m "c4"
[root@room8pc16 mygit]# git checkout b1   # 切换到b1分支
[root@room8pc16 mygit]# ls   # 工作区中没有config
[root@room8pc16 mygit]# cp /root/anaconda-ks.cfg .
[root@room8pc16 mygit]# git add .
[root@room8pc16 mygit]# git commit -m "c5"
[root@room8pc16 mygit]# git checkout master
[root@room8pc16 mygit]# git merge b1 -m "c6"  # 将分支b1合并到master
[root@room8pc16 mygit]# git branch -d b1  # 如果b1没有用了，可以删除
#######################################

四、在应用服务器上编写自动部署代码
1、检查是否有新版本
2、下载软件
3、校验文件，检查下载的软件包是否损坏
4、部署软件


应用服务器目录规划：
/var/www/download/: 存软件包和md5值
/var/www/deploy/：存live_version和解压的软件包
/var/www/html/nsd1809: deploy中最新版本目录的软链接




