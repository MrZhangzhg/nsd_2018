一、创建项目
1、创建新的pycharm项目，解释器使用/opt/djenv/bin/python
2、创建django项目
# django-admin startproject myansible
# cd myansible/
3、配置pycharm，参见mysite项目
4、创建一个名为webansi的应用
# python manage.py startapp webansi
5、配置项目
# myansible/settings.py
ALLOWED_HOSTS = '*'
INSTALLED_APPS = [
    ... ...
    'webansi',
]
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_TZ = False
6、安装必须的软件包
(djenv) [root@room8pc16 zzg_pypkgs]# cd ansible_pkg/
(djenv) [root@room8pc16 ansible_pkg]# pip install *
# cd ansible-cmdb_pkgs/
# pip install *
# cd sqlalchemy_pkgs/
# pip install *

二、项目规划
1、URL
http://x.x.x.x/   => 列出所有的功能
http://127.0.0.1/webansi/   => 列出所有主机的信息
http://127.0.0.1/webansi/addhosts/   => 添加/显示主机(组)
http://127.0.0.1/webansi/addmodules/  => 添加/显示模块和参数
http://127.0.0.1/webansi/tasks/   => 在远程主机上执行任务
2、授权
把http://127.0.0.1/webansi/开头的URL授权给webansi应用
# myansible/urls.py
from django.conf.urls import url, include
from django.contrib import admin

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^webansi/', include('webansi.urls')),
]
# vim webansi/urls.py
from django.conf.urls import url

urlpatterns = [
]

3、规划Models模型
HostGroup: group_name
Host: hostname, ipaddr, group
Module: module_name
Argument: arg_text, module
4、编写模型
# myansible/models.py
from django.db import models

class HostGroup(models.Model):
    group_name = models.CharField(max_length=50, null=False, unique=True)

    def __str__(self):
        return "组: %s" % self.group_name

class Host(models.Model):
    hostname = models.CharField(max_length=50, null=False, unique=True)
    ipaddr = models.CharField(max_length=15, null=False, unique=True)
    group = models.ForeignKey(HostGroup)

    def __str__(self):
        return "%s:%s=>%s" % (self.hostname, self.ipaddr, self.group)

class Module(models.Model):
    modlue_name = models.CharField(max_length=50, null=False, unique=True)

    def __str__(self):
        return "模块: %s" % self.modlue_name

class Argument(models.Model):
    arg_text = models.CharField(max_length=100, null=False, unique=True)
    modlue = models.ForeignKey(Module)

    def __str__(self):
        return "%s=>%s" % (self.modlue, self.arg_text)









