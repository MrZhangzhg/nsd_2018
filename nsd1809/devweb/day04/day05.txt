1.创建结果页
(1) urls.py
# polls/urls.py
    url(r'(?P<question_id>\d+)/result/$', views.result, name='result'),
(2) 函数
# polls/views.py
def result(request, question_id):
    return render(request, 'result.html', {'question_id': question_id})
(3) 模板
# polls/templates/result.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>投票结果页</title>
</head>
<body>
<h1>{{ question_id }}号问题的投票结果</h1>
</body>
</html>


编写模型
1、投票应用需要的表
(1) 问题表：id/问题/发布时间
(2) 选项表：id/选项/问题id
2、编写模型
# polls/models.py
from django.db import models

class Question(models.Model):
    question_text = models.CharField(max_length=200, unique=True, null=False)
    pub_date = models.DateTimeField()

    def __str__(self):
        return self.question_text

class Choice(models.Model):
    choice_text = models.CharField(max_length=100)
    votes = models.IntegerField()
    q = models.ForeignKey(Question)

    def __str__(self):
        return "%s=>%s: %s" % (self.q, self.choice_text, self.votes)
3、生成数据库的表
(djenv) [root@room8pc16 mysite]# python manage.py makemigrations
(djenv) [root@room8pc16 mysite]# python manage.py migrate
4、分析表结构
[root@room8pc16 mysite]# mysql -uroot -ptedu.cn
MariaDB [(none)]> use dj1809;
MariaDB [dj1809]> show tables;
表名构成： polls_question/polls_choice => 应用名_类名
MariaDB [dj1809]> desc polls_question;
表中的字段：类变量。对于外键来说，需要给类变量加上_id。如选项表中的外键q，在
数据库表中的名称是q_id。另外，没有声明主键，将会自动创建一个名为id的主键。
5、修改表结构
将选项表的票数加上默认值，并且将表中的q_id改为question_id
class Choice(models.Model):
    choice_text = models.CharField(max_length=100)
    votes = models.IntegerField(default=0)
    question = models.ForeignKey(Question)

    def __str__(self):
        return "%s=>%s: %s" % (self.q, self.choice_text, self.votes)
(djenv) [root@room8pc16 mysite]# python manage.py makemigrations
(djenv) [root@room8pc16 mysite]# python manage.py migrate
在数据库中查看polls_choice的表结构。
MariaDB [dj1809]> desc polls_question;

















