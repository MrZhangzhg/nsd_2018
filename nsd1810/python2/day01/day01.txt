字典：属于容器、可变、映射类型
>>> adict = {'name': 'tom', 'age': 20}
>>> bdict = dict(['ab', ('name', 'jerry'), ['age', '20']])
dict参数是个列表，列表中有三个元素，每个元素的长度为2，元素第一项为key，第二项为val
>>> cdict = {}.fromkeys(['bob', 'alice', 'kenji'], 7)

>>> for key in adict:
...     print('%s: %s' % (key, adict[key]))

>>> '%(name)s: %(age)s' % adict

# 通过key赋值，key在字典中是修改，不在字典中则增加
>>> adict['age'] = 22
>>> adict['email'] = 'tom@qq.com'

字典的key只能是不可变类型的数据，如数字、字符串、元组

>>> print(adict.get('phone'))   # 在字典中取得key为phone的值，没有默认返回None
None
>>> adict.get('phone', '114')  # 如果没有phone这个key，返回指定值
>>> adict.get('name', 'zhangsan')  # 字典有name，对就是tom，所以返回tom

>>> adict.keys()   # 获取所有的key
>>> for key in adict.keys():
...     print(key)
>>> for key in adict:  # 与上面的等价
...     print(key)

>>> adict.values()   # 取得所有的值，也可以用for遍历
>>> adict.items()    # 取得键-值对
>>> for key, val in adict.items():
...     print(key, val)

>>> adict.popitem()   # 随机弹出键值对
>>> adict.pop('age')   # 弹出key='age'的元素
22
>>> adict.update({'age': 20, 'phone': '15011223344'})  # 更新字典


\r表示回车不换行
####################
@###################
#@##################
##@#################



集合：由不同不可变元素构成，相当于是无值的字典。
>>> aset = set('abc')
>>> cset = set(['hello', 'world'])
>>> bset = set('bcd')
>>> len(aset)
>>> for ch in aset:
...     print(ch)
>>> aset | bset   # 并集 {'c', 'd', 'a', 'b'}
>>> aset & bset   # 交集 {'c', 'b'}
>>> aset - bset   # 差补 {'a'}   aset中有，bset没有

# 将列表中重复的数字去除
>>> from random import randint
>>> alist = [randint(1,50) for i in range(20)]
>>> list(set(alist))


取出在/tmp/passwd中有，而/etc/passwd中没有的行：
[root@room8pc16 day01]# cp /etc/passwd /tmp/
[root@room8pc16 day01]# vim /tmp/passwd  # 修改文件，和/etc/passwd有区别
>>> with open('/etc/passwd') as fobj:
...     aset = set(fobj)   # 文件的每一行，成为了集合的元素
>>> with open('/tmp/passwd') as fobj:
...     bset = set(fobj)
>>> bset - aset    # 取差补，bset包含，aset不包含
>>> with open('/tmp/result.txt', 'w') as fobj:
...     fobj.writelines(bset - aset)


集合的方法：
>>> aset = set('abcd')
>>> bset = set('bcd')
>>> aset.union(bset)   # aset | bset
>>> aset.intersection(bset)  # aset & bset
>>> aset.difference(bset)   # aset - bset
>>> aset.issuperset(bset)   # aset是bset的超集吗
>>> bset.issubset(aset)     # bset是aset的子集吗
>>> aset.add(10)
>>> aset.update([10, 20, 30])
>>> aset.remove(10)
>>> aset.pop()



时间表示方式：
1、时间戳：从1970-1-1 0:00:00到某一时间点之间的秒数
>>> import time
>>> time.time()   # 1552719169.5327027
2、UTC时间：世界协调时
>>> time.ctime()
3、9元组: 年月日时分秒，一周中的第几天，一年中的第几天，是不是夏令时
>>> time.localtime()
>>> t = time.localtime()
>>> t.tm_year
2019
>>> t.tm_yday
75

[root@room8pc16 day01]# date +'%Y-%m-%d %H:%M:%S'
>>> time.strftime('%Y-%m-%d %H:%M:%S')
>>> time.sleep(3)
>>> time.strftime('%a')   # 'Sat'
>>> time.strftime('%A')   # 'Saturday'


datetime模块
>>> import datetime
>>> datetime.datetime.now()   # 这种方法太罗嗦，可以采用下面的导入方式
>>> from datetime import datetime
>>> t1 = datetime(2020, 5, 1)   # 2020-5-1
>>> t2 = datetime.now()   # 当前时间：年月日时分秒毫秒
>>> t2.year
2019
>>> t2.month
3
>>> t2.day
16
>>> t2.hour
15
>>> t2.minute
28
>>> t2.second
15
>>> t2.microsecond
929933
>>> t1 > t2

>>> from datetime import datetime, timedelta
>>> t1 = datetime.now()   # 取出当前时间
>>> days = timedelta(days=100, hours=3)
>>> t1 - days   # 100天3小时之前的时间
datetime.datetime(2018, 12, 6, 12, 36, 12, 622345)
>>> t1 + days   # 100天3小时之后的时间
datetime.datetime(2019, 6, 24, 18, 36, 12, 622345)


os模块：是python访问文件系统的主要方法
>>> import os
>>> os.getcwd()   # pwd
>>> os.listdir()   # ls
>>> os.listdir('/tmp/')   # ls /tmp
>>> os.makedirs('/tmp/aaa/bbb')   # mkdir -p /tmp/aaa/bbb
>>> os.mkdir('/tmp/demo')
>>> os.chdir('/tmp/demo')   # cd /tmp/demo
>>> os.symlink('/etc/hosts', 'zhuji')   # ln -s /etc/hosts zhuji
>>> os.mknod('mytest')   # touch mytest
>>> os.remove('mytest')   # rm mytest
>>> os.unlink('zhuji')   # unlink zhuji   # 专用于删除快捷方式
>>> os.path.isfile('/etc/hosts')   # [ -f /etc/hosts ]
>>> os.path.isdir('/etc/')   # [ -d /etc ]
>>> os.path.islink('/etc/grub2.cfg')   # 判断是不是链接文件
>>> os.path.exists('/etc')    # [ -e /etc ]
>>> os.path.split('/tmp/demo/mytest')   # 切隔路径
>>> os.path.join('/tmp/demo', 'mytest')   # 路径拼接


pickle模块：可以将任意的数据类型写到文件中，还能取出
>>> import pickle
>>> f = open('/tmp/abc.data', 'wb')
>>> shop_list = ['apple', 'banana', 'peach', 'water']
>>> pickle.dump(shop_list, f)
>>> f.close()
--------------------------
>>> import pickle
>>> f = open('/tmp/abc.data', 'rb')
>>> mylist = pickle.load(f)
>>> f.close()
>>> type(mylist)
>>> len(mylist)
>>> mylist[1]

记账：每一笔收支都放到一个列表中，再把每笔收支放到另一个大列表中
记录新的信息，先构建小列表，再把小列表append到大列表中
records = [
    ['2019/3/16', 0, 0, 10000, 'init'],
    ['2019/3/16', 0, 200, 9800, 'buy clothes'],
]































