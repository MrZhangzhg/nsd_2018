>>> def get_age(name, age):
...     print('%s is %s years old' % (name, age))

>>> get_age('bob', 20)   # ok
>>> get_age(20, 'bob')   # 没有语法错误，但是语义不对
>>> get_age(age=20, name='bob')   # ok
>>> get_age(age=20, 'bob')   # 语法错误，key=val的形式，必须在后面
>>> get_age(20, name='bob')
# 20按函数定义的顺序传给了name，后面又指定name='bob'，所以name得到多个值，报错
>>> get_age('bob', age=20)   # OK


匿名函数: lamda
高阶函数：把函数作为另一个函数的参数，或是函数的返回值是函数


全局变量：在顶级代码中定义的变量，全局变量一旦定义，在定义开始一直到程序结束，任何
地方都可见、可用
>>> x = 10    # 全局变量
>>> def foo():
...     print(x)   # 打印全局变量x
...
>>> foo()
10
局部变量：在函数内部定义，只有函数运行期间可见可用
>>> def bar():
...     hi = 'hello world'
...     print(hi)
...
>>> bar()
hello world
>>> print(hi)   # NameError，全局不能访问局部变量

如果全局和局部有同名变量，局部变量就把全局变量遮盖住了
>>> x = 10
>>> def foo():
...     x = 100
...     print(x)
...
>>> foo()
100
>>> print(x)
10

如果真的希望在局部使用全局变量，需要在函数内通过global语句进行声明
>>> x = 10
>>> def foo():
...     global x   # 声明此处的x是全局的x
...     x = 100
...     print(x)
...
>>> print(x)    # 函数定义，不会执行函数内的代码，所以此处的x仍然是10
10
>>> foo()    # 调用函数，函数将把全局的x值改掉
100
>>> print(x)   # 全局的x值已变为100
100



偏函数：通过functools.partial进行其他函数的改造，把一个函数的某些参数赋值，生成
新的函数
>>> def add(a,b,c,d,e,f):
...     return a+b+c+d+e+f
>>> add(10,20,30,40,50,5)
>>> add(10,20,30,40,50,10)
>>> add(10,20,30,40,50,15)
# 改造add，将前5个数固定下来，生成新函数myadd
>>> myadd = partial(add, 10, 20, 30, 40, 50)
>>> myadd(5)
>>> myadd(10)


递归函数：函数内部对自身进行调用
5! = 5x4x3x2x1 = 5x4! = 5x4x3! = 5x4x3x2! = 5x4x3x2x1!


生成器：本质上仍然是函数，函数一般只会返回一个最终值，但是生成器可以通过yield返回
很多个中间结果
>>> def mygen():
...     yield 'hello world'
...     a = 10 + 20
...     yield a
...     yield [10, 20, 30]
...
>>> mg = mygen()
>>> mg.__next__()
>>> mg.__next__()
>>> mg.__next__()
>>> mg.__next__()   # 无值可取的时候，将会发生StopIteration异常
>>> mg = mygen()
>>> for i in mg:
...     print(i)











