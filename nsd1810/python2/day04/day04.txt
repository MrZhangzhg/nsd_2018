>>> import os
>>> src_dir = '/tmp/mydemo/security/'
>>> os.path.basename(src_dir)
''
>>> os.path.basename(src_dir.rstrip('/'))  # 先去除结尾的/
'security'


192.168.1.1     525400A3B4C5
192.168.1.2     000C29123456

:%s/\(..\)\(..\)\(..\)\(..\)\(..\)\(..\)$/\1:\2:\3:\4:\5:\6/


>>> import re
>>> import re
>>> re.match('f..', 'food') # 在food中匹配f..，匹配到返回匹配对象，否则是None
<_sre.SRE_Match object; span=(0, 3), match='foo'>
>>> print(re.match('f..', 'seafood'))
None
>>> m = re.search('f..', 'seafood')
>>> m.group()  # 匹配对象的group方法返回匹配到的内容
'foo'
>>> re.findall('f..', 'seafood is food')
['foo', 'foo']
>>> for m in re.finditer('f..', 'seafood is food'):
...     print(m.group())
foo
foo

>>> re.split('-|\.', 'hello-world-abc.123.txt')
['hello', 'world', 'abc', '123', 'txt']
>>> re.sub('X', 'tom', 'Hi X, ni hao X')
'Hi tom, ni hao tom'
>>> re.sub('X|Y', 'tom', 'Hi X, ni hao Y')
'Hi tom, ni hao tom'

在匹配量非常大的时候，先把正则表达式的模式编译compile，会有更好的效率
>>> cpatt = re.compile('f..')
>>> m = cpatt.search('seafood')
>>> m.group()
'foo'
>>> cpatt.findall('seafood is food')
['foo', 'foo']


荷尔曼 标准库
http://down.51cto.com/data/1018986

>>> from collections import Counter
>>> c1 = Counter()
>>> c1.update('hello')
>>> c1
>>> c1.update(['hello'])
>>> c1.update(['hello'])
>>> c1.update(['hello'])
>>> c1.most_common(2)   # 前2名











