模块导入的搜索路径：
1、当import模块时，python到sys.path定义的路径下寻找模块
2、如果希望自己写的模块，也可以在任何位置导入，可以把模块拷贝到site-packages目录，还可
以设置PYTHONPATH环境变量指定搜索路径
export PYTHONPATH=你的模块目录
这样就可以在任何位置import自己的模块
3、模块不管import导入多少回，只会load加载一次，即以第一次为准
4、目录可以看作是特殊的模块
[root@room8pc16 day03]# mkdir mypkg
[root@room8pc16 day03]# echo 'hi="hello world"' > mypkg/hello.py
>>> import mypkg.hello
>>> mypkg.hello.hi
'hello world'
>>> from mypkg import hello
>>> hello.hi
'hello world'
####以下报错，不会到mypkg目录查找模块文件####
>>> import mypkg
>>> mypkg.hello.hi
#################
5、在python2中，目录不能直接成为包，需要在这个目录下创建一个__init__.py
[root@room8pc16 day03]# touch mypkg/__init__.py


hashlib模块
>>> import hashlib
>>> m = hashlib.md5(b'123456')
>>> m.hexdigest()
'e10adc3949ba59abbe56e057f20f883e'
哈希：hash，单向加密，相同的原始数据，总是得到相同的乱码，乱码长度固定。不能通
过乱码反推出原始数据
http://www.cmd5.com

>>> m = hashlib.md5()
>>> m.update(b'123')
>>> m.update(b'456')
>>> m.hexdigest()
'e10adc3949ba59abbe56e057f20f883e'


tarfile模块：
>>> import os
>>> import shutil
>>> import tarfile
>>> os.mkdir('/tmp/mydemo')
>>> shutil.copytree('/etc/security', '/tmp/mydemo/security')
>>> os.chdir('/tmp/mydemo')
>>> tar = tarfile.open('security.tar.gz', 'w:gz')   # 写入, gzip压缩
>>> tar.add('security')
>>> tar.add('/etc/hosts')
>>> tar.close()
##############################
>>> shutil.rmtree('security')
>>> tar = tarfile.open('security.tar.gz', 'r:gz')
>>> tar.extractall()
>>> tar.close()




>>> import os
>>> import pprint
>>> result = list(os.walk('security'))
>>> len(result)
5
>>> item1 = result[0]
>>> len(item1)
3
>>> pprint.pprint(result)
[('security',
  ['console.apps', 'console.perms.d', 'limits.d', 'namespace.d'],
  ['access.conf',
   'chroot.conf',
   'console.handlers',
   'console.perms',
   'group.conf',
   'limits.conf',
   'namespace.conf',
   'namespace.init',
   'opasswd',
   'pam_env.conf',
   'sepermit.conf',
   'time.conf',
   'pwquality.conf']),
 ('security/console.apps', [], ['config-util', 'xserver', 'liveinst', 'setup']),
 ('security/console.perms.d', [], []),
 ('security/limits.d', [], ['20-nproc.conf']),
 ('security/namespace.d', [], [])]
列出所有的文件路径
>>> for path, folders, files in os.walk('security'):
...     for file in files:
...         os.path.join(path, file)



OOP: 面向对象的编程
实现数据和行为的统一、融合

player1 = {'name': xxx, 'gender': xxx, 'zhiye': xxx}

dev move():

def attack():

def fly():


class Bird:
    def fly():

pigion = Bird()
pigion.fly()


OOP中以双下划线开头结尾的方法叫作magic方法(魔法方法)

OOP需要掌握的内容：
1、类的定义
(1) 一般来说，绑定在实例身上的属性使用__init__方法
(2) 方法：在类中的函数
2、继承：子类拥有父类的方法，还可以自定义新的方法
3、组合：相对用得少
4、三个magic魔法方法










