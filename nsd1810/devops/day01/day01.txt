fork编程的思路
1、思考父子进程的分工
2、一般来说父进程只负责生成子进程
3、子进程只负责做具体的工作，做完后要退出

waitpid用于处理子进程，它的参数有两个，第2个参数是0表示挂起父进程，1表示不挂起
挂起父进程时，父进程一直等待子进程，当子进程结束之后，父进程回收僵尸进程的所有资
源之后继续向下执行。
如果父进程不挂起，运行到waitpid的时候，如果发现子进程是僵尸进程，就处理，此时的
返回值是(子进程ID, 0);如果子进程没有执行完，仍然会向下执行，此时的返回值是(0, 0)

fork网络编程
1、思考父子进程的分工
2、一般来说，父进程负责接收客户端的连接，然后生成子进程
3、子进程负责与客户端通信
4、父进程继续等待新客户端连接
5、长期运行的网络服务器程序，有可能生成很多僵尸进程，需要处理，注意，每个waitpid
只能处理一个僵尸进程


程序：在硬盘上存在的一些可执行文件
进程：程序的一次执行；加载到内存中的一系列指令。每个进程，都有自己独立的运行空间
线程：轻量级进程。一个进程内包含1到多个线程，所有的线程共用一个进程的资源

时间片、分时系统


多线程编程思路：
1、思考主线程和工作线程的分工
2、主线程类似于父进程，只负责生成工作线程
3、工作线程类似于子进程，只负责做具体的工作
4、工作线程运行结束后，就会自动消失，不会产生僵尸进程

多线路程网络编程：
1、主线程用于生成工作线程
2、工作线程与客户端通信



windows系统不支持多进程方式


多线程的限制：
GIL：全局解释器锁。GIL只能允许某一时刻只有一个线程访问解释器。

程序分为：
CPU密集型应用：需要更高的主频，多进程适应
IO密集型应用：多进程、多线程都适用









