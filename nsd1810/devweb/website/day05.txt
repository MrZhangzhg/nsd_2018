python api:
1、进入python shell
(djenv) [root@room8pc16 mysite]# python manage.py shell
>>> from polls.models import Question
2、创建问题
（1）创建实例
>>> q1 = Question(question_text="散伙饭去哪吃？", pub_date="2018-03-01 17:00:00")
>>> q1.save()
（2）使用管理器
每个class都有一个名为objects的管理器，我们更多的是采用管理器实现增删改查
get_or_create意思是在数据库里取出符合条件的记录，没有找到则创建
>>> q2 = Question.objects.get_or_create(question_text="Are you ok?", pub_date="2018-04-02 10:00:00")

3、创建选项
>>> from polls.models import Choice
（1）创建实例
>>> c1 = Choice(choice_text="大排档", question=q1)
>>> c1.save()
（2）使用管理器
>>> c2 = Choice.objects.get_or_create(choice_text="扶墙进，扶墙出", question=q1)
（3）通过问题创建选项
问题的选项是Choice类，django就设置了choice_set，如果选项的class名为XuanXiang，
那么django就会设置xuangxiang_set。
>>> c3 = q1.choice_set.get_or_create(choice_text="KFC")[0]
get_or_create的返回值是元组，第一项是Choice的实例，第2项是真假值，表示是否创建成功

4、修改，只要进行属性重新赋值即可
>>> c3.choice_text = '西餐'
>>> c3.save()
5、删除，只要调用实例的delete方法即可
>>> c3.delete()

6、查询
（1）查询所有的问题
>>> Question.objects.all()  # 返回由所有的实例构成的查询集合
>>> qset1 = Question.objects.all()
>>> len(qset1)
5
>>> qset1[0]  # 取出第一个问题
<Question: Q: 从达内结业后，第一份工作，你期待的工资是多少？>
>>> qset1[len(qset1) - 1]   # 取出最后一个问题
（2）查询所有的问题，按发布时间进行排序
>>> Question.objects.order_by('pub_date')   # 默认升序排列
>>> Question.objects.order_by('-pub_date')  # 降序排列

（3）用get方法返回一个实例，如果查不到或是得到多项则触发异常
>>> q3 = Question.objects.get(id=1)
（4）用filter方法返回满足条件的查询集合
>>> Question.objects.filter(id=10)   # 返回空
>>> Question.objects.filter(id__lt=10)   # 返回id小于10的全部问题的集合
>>> Question.objects.filter(id__lt=10).order_by('-pub_date')

7、查询条件的应用
查询条件都是采用属性的方式，属性不再通过句点表示，而是使用双下划线
（1）判断数字大小
=实际是上__exact=的缩写
>>> Question.objects.filter(id=1)  是以下结构的缩写
>>> Question.objects.filter(id__exact=1)
大于：__gt
大于等于__gte
小于：__lt
小于等于__lte
>>> Question.objects.filter(id__lte=3)
>>> Question.objects.filter(id__gt=3)
（2）其他类型
问题内容以'从达内结业'开头
>>> Question.objects.filter(question_text__startswith='从达内结业')
问题的发布日期是2018年
>>> Question.objects.filter(pub_date__year=2018)



修改投票首页
1、修改index函数
# polls/views.py
from django.shortcuts import render
from .models import Question

def index(request):
    questions = Question.objects.order_by('-pub_date')
    return render(request, 'index.html', {'questions': questions})
2、修改模板
# polls/templates/index.html
<body>
<h1>投票首页</h1>
{{ questions }}
</body>

3、继续完善模板
<body>
<h1>投票首页</h1>
{% comment %}questions是views.index传过来的参数，question自定义的{% endcomment %}
{% for question in questions %}
    <div>  {% comment %}forloop.counter是模板语言中循环的计数器{% endcomment %}
        {{ forloop.counter }}. {{ question.question_text }} {{ question.pub_date }}
    </div>
{% endfor %}
</body>
说明：{{ }}表示变量，{% %}是模板语法，在花括号外面的都是html语法

4、在问题的内容上加入超链接
<h1>投票首页</h1>
{% comment %}questions是views.index传过来的参数，question自定义的{% endcomment %}
{% for question in questions %}
    <div>  {% comment %}forloop.counter是模板语言中循环的计数器{% endcomment %}
        {{ forloop.counter }}.
{#        <a href="/polls/{{ question.id }}" target="_blank">#}
        <a href="{% url 'detail' question_id=question.id %}" target="_blank">
            {{ question.question_text }}
        </a>
        {{ question.pub_date }}
    </div>
{% endfor %}
</body>



制作问题详情页
1、修改视图函数
def detail(request, question_id):
    question = Question.objects.get(id=question_id)
    return render(request, 'detail.html', {'question': question})

2、修改模板detail.html
<body>
<h1>{{ question.id }}号问题投票详情</h1>
{{ question.question_text }}
{{ question.choice_set.all }}
</body>








