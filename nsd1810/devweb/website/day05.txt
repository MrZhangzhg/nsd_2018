python api:
1、进入python shell
(djenv) [root@room8pc16 mysite]# python manage.py shell
>>> from polls.models import Question
2、创建问题
（1）创建实例
>>> q1 = Question(question_text="散伙饭去哪吃？", pub_date="2018-03-01 17:00:00")
>>> q1.save()
（2）使用管理器
每个class都有一个名为objects的管理器，我们更多的是采用管理器实现增删改查
get_or_create意思是在数据库里取出符合条件的记录，没有找到则创建
>>> q2 = Question.objects.get_or_create(question_text="Are you ok?", pub_date="2018-04-02 10:00:00")

3、创建选项
>>> from polls.models import Choice
（1）创建实例
>>> c1 = Choice(choice_text="大排档", question=q1)
>>> c1.save()
（2）使用管理器
>>> c2 = Choice.objects.get_or_create(choice_text="扶墙进，扶墙出", question=q1)
（3）通过问题创建选项
问题的选项是Choice类，django就设置了choice_set，如果选项的class名为XuanXiang，
那么django就会设置xuangxiang_set。
>>> c3 = q1.choice_set.get_or_create(choice_text="KFC")[0]
get_or_create的返回值是元组，第一项是Choice的实例，第2项是真假值，表示是否创建成功

4、修改，只要进行属性重新赋值即可
>>> c3.choice_text = '西餐'
>>> c3.save()
5、删除，只要调用实例的delete方法即可
>>> c3.delete()

6、查询
（1）查询所有的问题
>>> Question.objects.all()  # 返回由所有的实例构成的查询集合
>>> qset1 = Question.objects.all()
>>> len(qset1)
5
>>> qset1[0]  # 取出第一个问题
<Question: Q: 从达内结业后，第一份工作，你期待的工资是多少？>
>>> qset1[len(qset1) - 1]   # 取出最后一个问题
（2）查询所有的问题，按发布时间进行排序
>>> Question.objects.order_by('pub_date')   # 默认升序排列
>>> Question.objects.order_by('-pub_date')  # 降序排列

（3）用get方法返回一个实例，如果查不到或是得到多项则触发异常
>>> q3 = Question.objects.get(id=1)
（4）用filter方法返回满足条件的查询集合
>>> Question.objects.filter(id=10)   # 返回空
>>> Question.objects.filter(id__lt=10)   # 返回id小于10的全部问题的集合
>>> Question.objects.filter(id__lt=10).order_by('-pub_date')













