虚拟环境：
1、创建虚拟环境
[root@room8pc16 website]# python3 -m venv /opt/djenv/
2、激活虚拟环境
[root@room8pc16 website]# source /opt/djenv/bin/activate
3、在虚拟环境中安装软件包
(djenv) [root@room8pc16 zzg_pypkgs]# cd dj_pkgs
(djenv) [root@room8pc16 dj_pkgs]# pip install *
(djenv) [root@room8pc16 zzg_pypkgs]# cd sqlalchemy_pkgs/
(djenv) [root@room8pc16 sqlalchemy_pkgs]# pip install *
(djenv) [root@room8pc16 zzg_pypkgs]# cd ansible_pkg/
(djenv) [root@room8pc16 ansible_pkg]# pip install *
(djenv) [root@room8pc16 zzg_pypkgs]# cd ansible-cmdb_pkgs/
(djenv) [root@room8pc16 ansible-cmdb_pkgs]# pip install *
(djenv) [root@room8pc16 zzg_pypkgs]# cd requests_pkgs/
(djenv) [root@room8pc16 requests_pkgs]# pip install *

修改pycharm配置
File -> settings -> Project -> project interpreter


创建项目：
(djenv) [root@room8pc16 website]# django-admin startproject mysite
修改pycharm的django配置，指定django项目的位置
File -> settings -> Language & Frameworks -> Django

项目文件
[root@room8pc16 website]# tree mysite/
mysite/
├── manage.py           # 项目管理文件
└── mysite
    ├── __init__.py
    ├── settings.py     # 项目配置文件
    ├── urls.py         # urlconf路由文件
    └── wsgi.py         # 部署到apache上的时候需要的部署文件

启动开发服务器：django自带了一个用于测试、能够看到网站效果的服务器
(djenv) [root@room8pc16 mysite]# python manage.py runserver
访问http://127.0.0.1:8000/


修改配置
# mysite/settings.py
ALLOWED_HOSTS = '*'
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dj1810',
        'USER': 'root',
        'PASSWORD': 'tedu.cn',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_TZ = False

创建数据库：
(djenv) [root@room8pc16 ~]# mysql -uroot -ptedu.cn
MariaDB [(none)]> create database dj1810 default charset utf8;

django如果提示没有MySQLdb，则：
# mysite/__init__.py
import pymysql
pymysql.install_as_MySQLdb()



django内建的模块需要数据库的支持，生成默认的数据表
(djenv) [root@room8pc16 mysite]# python manage.py makemigrations
(djenv) [root@room8pc16 mysite]# python manage.py migrate

创建管理员用户
(djenv) [root@room8pc16 mysite]# python manage.py createsuperuser
访问后台管理页面
http://127.0.0.1:8000/admin/


将本机的http服务停掉，让我们自己的项目运行在80端口
(djenv) [root@room8pc16 mysite]# python manage.py runserver 0:80


项目可以分成很多功能模块，每个功能模块编写成一个应用
编写投票应用
1、创建名为polls的应用
(djenv) [root@room8pc16 mysite]# python manage.py startapp polls
2、将应用加入到项目
# mysite/settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'polls',   # 将应用加入到项目
]
3、规划URL
http://127.0.0.1/polls/    # 投票首页，列出所有投票项
http://127.0.0.1/polls/1/   # 1号投票详情，用于投票
http://127.0.0.1/polls/1/result/   # 1号投票的结果

4、授权应用的url由应用的urls.py处理
如果用户访问的网址以http://x.x.x.x/polls/开头，交给polls应用处理
# mysite/urls.py
from django.conf.urls import url, include
from django.contrib import admin

urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^polls/', include('polls.urls')),
]

# polls/urls.py
from django.conf.urls import url

urlpatterns = [
]


编写投票首页：
1、编写URL匹配的函数
# polls/urls.py
urlpatterns = [
    # url(URL的正则, 对应的函数, url的名称)
    url(r'^$', views.index, name='index'),
]
2、编写函数
# polls/views.py
from django.shortcuts import render

def index(request):  # 用户的请求会作为第一个参数传递给index函数
    return render(request, 'index.html')  # render加载模板文件返回给用户
3、创建模板文件，模板有固定位置，不能创建错
# mkdir polls/templates
# polls/templates/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>投票首页</title>
</head>
<body>
<h1>投票首页</h1>
</body>
</html>


编写投票详情页
1、URL
# polls/urls.py
urlpatterns = [
    # url(URL的正则, 对应的函数, url的名称)
    url(r'^$', views.index, name='index'),
    # url(r'\d+/$', views.detail, name='detail'),
    # url(r'(\d+)/$', views.detail, name='detail'),
    url(r'(?P<question_id>\d+)/$', views.detail, name='detail'),
]
2、视图函数
# polls/views.py
def detail(request, question_id):
    return render(request, 'detail.html', {'question_id': question_id})
说明：字典将会成为detail.html网页的变量和值 question_id=xx
3、模板
# polls/templates/detail.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>投票详情</title>
</head>
<body>
<h1>{{ question_id }}号问题投票详情</h1>
</body>
</html>







