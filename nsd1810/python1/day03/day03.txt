range函数：用于产生一系列整数
range返回的是一个range对象，向它取值，它会立即生一个值，不取值不生成，所以不占内存
range如果只给了一个参数，这个数字是结束数字，默认从0开始取值，结束数字不包含
>>> list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> for i in range(10): print(i)
>>> list(range(6, 11))  # [6, 7, 8, 9, 10]
>>> list(range(1, 11, 2))   # [1, 3, 5, 7, 9]
>>> list(range(10, 0, -1))   # [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
思考：同时取出列表的下标和值


列表解析：用于生成列表
>>> [5 + 5]
>>> [5 + 5 for i in range(10)]
>>> [5 + i for i in range(1, 11)]
>>> [5 + i for i in range(1, 11) if i % 2 == 0]  # if是过滤条件，判断为真才保留
思考：生成192.168.1.0/24网络中所有的IP地址
>>> ['192.168.1.%s' % i for i in range(1, 255)]

文件操作
1、操作步骤：打开、读写、关闭
# cp /etc/passwd /tmp
>>> f = open('/tmp/passwd')   # 默认以r读方式打开
>>> data = f.read()  # read默认读取全部内容，文件指针将会移动到文件结尾
>>> data   # 文件中所有的内容都被保存成了一个大字符串
>>> data = f.read()  # 继续读文件，因为已经将文件指针移动到结尾，再没有数据可读
>>> data   # 空串
>>> f.close()
###########################
>>> f = open('/tmp/passwd')
>>> f.read(4)   # 指定读取4字节，实际使用时建议4096字节
>>> f.readline()   # 遇到\n结束
>>> f.readline()
>>> f.readlines()   # 读取所有行，每行成为一个字符串，放到列表中
>>> f.close()
###########################
>>> f = open('/tmp/passwd')   # 常用的读文本文件的方法
>>> for line in f:
...     print(line, end='')
>>> f.close()   # 使用完文件关闭是一个良好的习惯，忘记关闭，也不一定会产生严重后果

2、读取非文本文件
# cp /bin/ls /tmp/list
>>> f = open('/tmp/list', 'rb')  # b表示bytes
>>> f.read(4)  # 读取4字节
>>> f.close()

3、写文本文件
>>> f = open('/tmp/passwd', 'w')
>>> f.write('hello world!\n')
[root@room8pc16 day03]# cat /tmp/passwd   # 没有内容
因为数据太少，写到缓存了，当缓存内容大到一定程度，如4K，将会写入硬盘
>>> f.flush()  # 立即将缓存数据同步到磁盘，一般不用单独执行
[root@room8pc16 day03]# cat /tmp/passwd  # 有内容
>>> f.writelines(['2nd line.\n', '3rd line.', 'new line.\n'])
注意：3rd line.后面没有\n，所以new line.\n将会与3rd line.在同一行
>>> f.close()  # 关闭文件也会将缓存写入磁盘

4、以2进制(bytes)形式写入
>>> f = open('/tmp/mytest', 'wb')
>>> f.write(b'hello world!\n')
# 1个英文字符可以对应一个字节，所以可以将英文字符直接以bytes形式写入
>>> f.write(b'人')  # 一个中文字符对应多个字节，所以不能直接加b，报错
>>> data = '人'
>>> data.encode()   # 默认转成UTF8编码代表的字节
>>> data.encode('utf8')    # 将'人'转成UTF8编码对应的2进制数
b'\xe4\xba\xba'   # \x表示16进制
>>> data.encode('gb2312')    # 将'人'转成GB2312编码对应的2进制数
b'\xc8\xcb'
每个16进制数一定对应4个2进制数
\xe4\xba\xba  => 11100100 10111010 10111010  => '人'
>>> f.write(data.encode())
>>> f.close()
>>> f = open('/tmp/mytest', 'wb')
>>> line = '大家好\n'
>>> f.write(line.encode())
>>> f.close()
(1)如果是英文字符，可以在字符串前加b直接写入
(2)如果是中文字符，需要先encode成utf8编码代表的bytes类型，再写入


###########################
with: 通过with打开文件，with语句结束后，文件自动关闭
>>> with open('/tmp/passwd') as f:   # 等价于f = open()
...     f.readline()
>>> f.readline()   # 报错，因为文件已经关闭了


###########################
移动文件指针
[root@room8pc16 day03]# cp /etc/passwd /tmp/
>>> f = open('/tmp/passwd', 'rb')
>>> f.tell()   # 返回文件指针的位置
>>> f.readline()  # 读取第一行
>>> f.tell()
# 移动到文件开头
>>> f.seek(0, 0)   # 第2个数字0表示开头，2表示结尾，1表示当前位置；第1个数字是偏移量
>>> f.readline()   # 仍然是第一行
>>> f.seek(7, 0)   # 指针从开头向后偏移7个字节
>>> f.read(3)
>>> f.seek(-6, 2)  # 指针从结尾向前偏移6个字节
>>> f.read()
>>> f.close()


###########################
函数：
>>> def pstar():    # 定义函数，不执行函数体内的代码
...     print('+' * 30)
...     print('*' * 30)
>>> pstar   # 出现的内容，是指明函数在内存的位置
>>> pstar()   # 调用函数，函数体内代码执行一遍


###########################
函数返回值：函数必须使用明确的return进行值的返回，没有return，默认返回None
函数参数：函数需要处理的数据，一般都是通过参数传递进去的

###########################
模块：一个python文件就是一个模块，模块名就是文件名去除扩展名
我们自己编写的文件也是模块，模块名也是一个名字，所以模块命名也要符合相应的约定：
(1) 首字符只能是字母或下划线
(2) 其他字符可以是字母或下划线或数字
(3) 区分大小写
模块导入采用import语句，导入模块时，模块中的代码将会被执行一遍，这叫load加载

模块都有一个特殊的变量__name__，模块直接运行，其值为__main__，被导入时值为模块名
[root@room8pc16 day03]# cat foo.py
print(__name__)
[root@room8pc16 day03]# python3 foo.py
__main__
[root@room8pc16 day03]# cat bar.py
import foo
[root@room8pc16 day03]# python3 bar.py
foo
















