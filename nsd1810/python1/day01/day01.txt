git: 版本控制软件
一、基础配置
1、安装
[root@node6 ~]# yum install -y git
2、配置用户信息
配置用户联系方式：名字、email
[root@node6 ~]# git config --global user.name "Mr.Zhang"
[root@node6 ~]# git config --global user.email "zzg@tedu.cn"
配置写日志使用的文本编辑器
[root@node6 ~]# git config --global core.editor vim
查看配置信息
[root@node6 ~]# git config --list
[root@node6 ~]# cat ~/.gitconfig
二、应用
1、git的三个工作区域
工作区：编写程序的目录
暂存区：保存工作区文件到版本库之间的缓冲地带
版本库：保存每次提交的代码。在工作区中有一个.git的目录，它就是版本库
2、创建git工作区
(1) 全新创建
[root@node6 ~]# git init gittest   # 将会出现gittest目录
(2) 已存在目录
[root@node6 ~]# mkdir devops
[root@node6 ~]# cd devops/
[root@node6 devops]# echo 'hello world' > a.txt
[root@node6 devops]# git init .
[root@node6 devops]# ls -A   # 可以查看到版本库.git
2、在工作目录中加入新文件、修改a.txt
[root@node6 devops]# cp /etc/hosts .
[root@node6 devops]# echo '2nd line' >> a.txt
[root@node6 devops]# git status   # 查看状态
3、发现工作区中有未跟踪的文件，添加它们到暂存区
[root@node6 devops]# git add hosts    # 加入指定文件
[root@node6 devops]# git add .        # 把当前目录中所有文件加入跟踪
[root@node6 devops]# git status
4、如果hosts是错误加入到暂存区的，可以根据git status提示，删除暂存区文件
[root@node6 devops]# git rm --cached hosts
5、提交暂存区的文件到版本库
[root@node6 devops]# git add .    # 将工作区所有文件加入到暂存区
[root@node6 devops]# git commit    # 在跳出的vim中写入日志
[root@node6 devops]# git status   # 干净的工作区

6、继续编写程序
[root@node6 devops]# cp /root/anaconda-ks.cfg .
[root@node6 devops]# git add .
[root@node6 devops]# git commit -m "add new file /root/anaconda-ks.cfg"
[root@node6 devops]# git status
7、查看版本库历史
[root@node6 devops]# git log

分支管理
1、git仓库中包含了一个默认的分支叫master
2、假如你正在编写代码，突然收到一个通知，代码有bug。我们的项目有很多人一起在开发，
可以指定某个人修改bug，其他人继续编写程序
3、正常编写程序的人员，仍然在master分支上工作，修改Bug的程序员新建一个分支，当bug
修复完成，再把他的分支合并到master上即可
                                   新分支b1-->修复bug，C4
                                  /                    \
                                 /                      \
project(master分支） --> C1  --> C2 --> C3 --------------> master
(1) 生成新的分支，注意生成新分支的时候，master一定要是干净的
[root@node6 devops]# git branch b1    # 分支名为b1
[root@node6 devops]# git branch   # 查看所有分支，当前所在分支前面有*
(2) 原有程序员继续在master分支上工作
[root@node6 devops]# cp /etc/motd .
[root@node6 devops]# git add .
[root@node6 devops]# git commit -m "add motd"
(3) 修复bug的程序员切换到分支b1上修复问题


















