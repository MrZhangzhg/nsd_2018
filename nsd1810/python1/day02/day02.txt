变量命名规定
1、第一个字符只能是字母下划线
2、其他字符可以是字母数字下划线
3、区分大小写

pythonstring -> pystr -> py_str
phone  update_phone
MyClass

变量赋值
1、赋值操作自右向左执行
a = 10
a = 5 + 5
>>> n = n + 1   # 报错，因为变量使用之前必须先赋值
>>> n = 10
>>> n = n + 1
>>> n    # 在交互解释器中，不用print也可以显示值，但是文件中不行
11
>>> n += 1    # 等价于n = n + 1
>>> n++   # 语法错误
>>> import this    # python之禅
美胜丑，明胜暗，简胜繁
>>> 5 / 3    # 1.6666666666666667
>>> 5 // 3   # 1
>>> 5 % 3    # 2 (模运算，求余)
>>> divmod(5, 3)   # 得到商和余数
>>> 2 ** 3    # 2的3次方


>>> 10 < 20 < 30   # True
>>> 10 < 20 > 15   # True, 相当于10 < 20 and 20 > 15


数据类型
一、数字
1、布尔数也算是整数
True: 1
False: 0
>>> True + 2
3
>>> False * 2
0
2、整数的表示方式
(1) 10进制数没有前缀
(2) 八进制数前缀是0o或0O
>>> import os
>>> os.chmod('login.py', 755)
>>> os.chmod('login.py', 0o755)   # linux文件权限是8进制数
(3) 16进制数前缀是0x或0X
>>> 0x11
17
>>> 0x23
35
(4) 2进制以0b或0B开头
>>> 0b11
3

二、字符串
1、字符串是引号中间的字符，单双引号没有区别
>>> 'tom\'s pet is a cat'
>>> "tom's pet is a cat"
2、如果字符串中有可变对象，可以使用%s占位
>>> 'hello %s' % 'bob'
'hello bob'
>>> 'hello %s' % 'tom'
'hello tom'
>>> '%s is %s years old' % ('tom', 22)
'tom is 22 years old'
3、python支持三引号（三个连续的单引号或双引号），可以保存用户的输入格式
>>> words = "hello\ngreet\nwelcome"
>>> print(words)    # print将\n翻译为回车
>>> danci = '''hello
... greet
... welcome'''
>>> print(danci)
>>> danci    # 内部存储仍然在单词间加入了\n
4、字符串操作
>>> py_str = 'python'
>>> len(py_str)   # 取长度
>>> py_str[0]   # 取出索引（常用名是下标）为0的字符
>>> py_str[6]   # 报错
>>> py_str[len(py_str) - 1]  # 字符串长度减1就是最后一个字符的下标
'n'
>>> py_str[5]
'n'
>>> py_str[-1]   # 自右向左以-1开始
'n'
>>> py_str[2:4]   # 取切片，起始下标对应的字符包含，结束下标不包含，取出th
>>> py_str[2:]   # 结束下标不写，表示到结尾
>>> py_str[:2]   # 开头不写表示从头取
>>> py_str[:]    # 从头到尾
>>> py_str[::2]    # 第2个冒号后面的数字是步长值
>>> py_str[1::2]
>>> py_str[::-1]   # 步长值为负，表示自右向左取，取出nohtyp

>>> 't' in py_str
True
>>> 'th' in py_str
True
>>> 'to' in py_str
False
>>> 'to' not in py_str   # 'to'不在py_str中吗？
True
>>> py_str + 100   # 报错，不同类型的数据不能操作
>>> py_str + str(100)   # str函数将数字100转成字符100
>>> '*' * 50     # 将*号重复50遍
>>> py_str * 5   # 将py_str变量表示的字符串重复5遍


列表：
相当于是一个数组，可以将各种对象存入到其中
>>> alist = ['tom', 'jerry', 10, 20, [1, 2, 3]]
>>> len(alist)   # 5
>>> alist[2:4]   # [10, 20]
>>> 10 in alist   # 10是列表的一项吗？True
>>> 1 in alist    # 1是列表的一项吗？False
>>> alist[-1] = 100   # 修改最后一项的值
>>> alist.append(200)   # 向列表尾部追加数字200
>>> help(alist.insert)   # 查看insert帮助
>>> alist + [5]
>>> alist * 3

https://yiyibooks.cn/  -> Python 352 文档 -> 库参考 -> 搜索"list"

元组：
元组可以当作是不可改变的列表
>>> atuple = (1, 2, 3, 4)
>>> len(atuple)
4
>>> atuple[0]
1
>>> atuple[1:3]
(2, 3)
>>> atuple[-1] = 10   # 元组不可变，报错
>>> 2 in atuple

字典：
key-value对格式的数据类型
>>> adict = {'name': 'tom', 'age': 20}
>>> len(adict)   # 2
>>> 20 in adict   # 20是字典的key吗？ False
>>> 'age' in adict   # True
>>> adict['age']   # 字典没有顺序，通过key找到value
>>> adict['age'] = 22   # age是字典的key，更新value
>>> adict['email'] = 'tom@tedu.cn'   # email不是字典的key，则添加新值


数据类型的分类：
1、存储：
标量：数字、字符串
容器：列表、元组、字典
2、更新：
可变：列表、字典
不可变：数字、字符串、元组
3、访问：
直接：数字
顺序：字符串、列表、元组
映射：字典




判断：
1、if后面的判断条件可以是数据类型，任何值为0的数字都是False，非0为True;
任何非空对象都是True，空对象是False
>>> if -0.0: print('yes')    # 不打印
>>> if 100: print('yes')     # 打印
>>> if ' ': print('yes')     # 空格也是个字符，True，打印
>>> if '': print('yes')      # 不打印
>>> if [False]: print('yes')   # 非空列表，True，打印
>>> if 'b' in 'abc': print('yes')
>>> if 3 > 0: print('yes')
>>> if 3 > 10:
...     print('yes')
... else:
...     print('no')


三元运算符
>>> a = 10
>>> b = 20
>>> if a <= b:
...     smaller = a
... else:
...     smaller = b
上面的写法可以简化为
>>> s = a if a <= b else b


随机选择
>>> import random
>>> random.choice('abcd')   # choice从序列对象中选择一项
>>> random.choice(['石头', '剪刀', '布'])





























